#-----------------------------------------------------------------------------------------------------------------------
#
#    ##     ## ######## ##       ########
#    ##     ## ##       ##       ##     ##
#    ##     ## ##       ##       ##     ##
#    ######### ######   ##       ########
#    ##     ## ##       ##       ##
#    ##     ## ##       ##       ##
#    ##     ## ######## ######## ##
#
#-----------------------------------------------------------------------------------------------------------------------

$(foreach name, $(call lp.help.get-phony-targets), lp.$(name)) : ;
	$(info )
	$(call lp.help.print-targets)

ifeq "$(call lp.help.is-enabled)" "true"
    $(call lp.fn.publicize-phony-targets, help)
endif

$(foreach feature, tsc bundle format clean, \
	$(foreach target, $(call lp.$(feature).get-phony-targets), \
        $(foreach help, $(call lp.help.get-phony-targets), \
		    $(eval $(call lp.fn.create-diagnostics-target, $(help), $(target)))) \
	 ) \
 )

#-----------------------------------------------------------------------------------------------------------------------
#
#     ######   #######  ##     ## ########  #### ##       ########
#    ##    ## ##     ## ###   ### ##     ##  ##  ##       ##
#    ##       ##     ## #### #### ##     ##  ##  ##       ##
#    ##       ##     ## ## ### ## ########   ##  ##       ######
#    ##       ##     ## ##     ## ##         ##  ##       ##
#    ##    ## ##     ## ##     ## ##         ##  ##       ##
#     ######   #######  ##     ## ##        #### ######## ########
#
#-----------------------------------------------------------------------------------------------------------------------

ifeq "$(call lp.tsc.is-enabled)" "true" # ......................................................... compiling is enabled

$(call lp.fn.declare-phony-targets, tsc, $(call lp.tsc.get-targets))

$(call lp.tsc.get-targets) : $(call lp.tsc.get-prerequisites)
	$(call lp.tsc.get-command-with-hooks, Compiling...)

else # ........................................................................................... compiling is disabled

.PHONY: $(foreach name, $(call lp.tsc.get-phony-targets), lp.$(name))

$(foreach name, $(call lp.tsc.get-phony-targets), lp.$(name)) : ;
    ifeq "$(strip $(call lp.tsc.get-command-with-hooks))" ""
		$(error Compiling is disabled/not configured)
    else
		$(call lp.tsc.get-command-with-hooks, Compiling...)
    endif

endif

#-----------------------------------------------------------------------------------------------------------------------
#
#    ########  ##     ## ##    ## ########  ##       ########
#    ##     ## ##     ## ###   ## ##     ## ##       ##
#    ##     ## ##     ## ####  ## ##     ## ##       ##
#    ########  ##     ## ## ## ## ##     ## ##       ######
#    ##     ## ##     ## ##  #### ##     ## ##       ##
#    ##     ## ##     ## ##   ### ##     ## ##       ##
#    ########   #######  ##    ## ########  ######## ########
#
#-----------------------------------------------------------------------------------------------------------------------

ifeq "$(call lp.bundle.is-enabled)" "true" # ....................................................... bundling is enabled

ifneq "$(call lp.bundle.get-targets)" "" # ........................... bundling is enabled and bundles have been defined

$(call lp.fn.declare-phony-targets, bundle, $(call lp.bundle.get-targets))

$(call lp.bundle.get-targets) : $(call lp.bundle.get-prerequisites)
	$(call lp.bundle.get-command-with-hooks, bundle, Bundling...)

else # ............................................................ bundling is enabled but no bundles have been defined

$(call lp.fn.declare-phony-targets, bundle, lp.bundle)

lp.bundle :
	$(error No bundles have been defined (missing call to lp.bundle.add-bundle))

endif

else # ............................................................................................ bundling is disabled

.PHONY: lp.bundle

lp.bundle : ;
    ifeq "$(strip $(call lp.bundle.get-command-with-hooks))" ""
		$(error Bundling is disabled/not configured)
    else
		$(call lp.bundle.get-command-with-hooks, Bundling...)
    endif

endif

#-----------------------------------------------------------------------------------------------------------------------
#
#    ########  #######  ########  ##     ##    ###    ########
#    ##       ##     ## ##     ## ###   ###   ## ##      ##
#    ##       ##     ## ##     ## #### ####  ##   ##     ##
#    ######   ##     ## ########  ## ### ## ##     ##    ##
#    ##       ##     ## ##   ##   ##     ## #########    ##
#    ##       ##     ## ##    ##  ##     ## ##     ##    ##
#    ##        #######  ##     ## ##     ## ##     ##    ##
#
#-----------------------------------------------------------------------------------------------------------------------

ifeq "$(call lp.format.is-enabled)" "true" # ..................................................... formatting is enabled

$(call lp.fn.declare-phony-targets, format, lp.internal.format)

lp.internal.format :
	$(call lp.format.get-command-with-hooks, Formatting...)

else # .......................................................................................... formatting is disabled

.PHONY: $(foreach name, $(call lp.format.get-phony-targets), lp.$(name))

$(foreach name, $(call lp.format.get-phony-targets), lp.$(name)) : ;
    ifeq "$(strip $(call lp.format.get-command-with-hooks))" ""
		$(error Formatting is disabled)
    else
		$(call lp.format.get-command-with-hooks, Formatting...)
    endif

endif

#-----------------------------------------------------------------------------------------------------------------------
#
#     ######  ##       ########    ###    ##    ##
#    ##    ## ##       ##         ## ##   ###   ##
#    ##       ##       ##        ##   ##  ####  ##
#    ##       ##       ######   ##     ## ## ## ##
#    ##       ##       ##       ######### ##  ####
#    ##    ## ##       ##       ##     ## ##   ###
#     ######  ######## ######## ##     ## ##    ##
#
#-----------------------------------------------------------------------------------------------------------------------

ifeq "$(call lp.clean.is-enabled)" "true" # ........................................................ cleaning is enabled

$(call lp.fn.declare-phony-targets, clean, lp.internal.clean)

lp.internal.clean :
    ifeq "$(call lp.clean.get-default-command)" "$(call lp.clean.get-effective-command)"
		$(if $(wildcard $(call lp.clean.get-files)), $(call lp.clean.get-effective-command))
    else
		$(call lp.clean.get-effective-command)
    endif

else # ............................................................................................ cleaning is disabled

.PHONY: $(foreach name, $(call lp.clean.get-phony-targets), lp.$(name))

$(foreach name, $(call lp.clean.get-phony-targets), lp.$(name)) : ;
    ifeq "$(strip $(call lp.clean.get-command-with-hooks))" ""
		$(error Cleaning is disabled)
    else
        ifeq "$(call lp.clean.get-default-command)" "$(call lp.clean.get-effective-command)"
			$(if $(wildcard $(call lp.clean.get-files)), $(call lp.clean.get-effective-command))
        else
			$(call lp.clean.get-effective-command)
        endif
    endif
endif
