#-----------------------------------------------------------------------------------------------------------------------
# Help and diagnostics
#-----------------------------------------------------------------------------------------------------------------------

$(foreach name, $(call lp.help.get-phony-targets), lp.$(name)) : ;
	$(info )
	$(call lp.help.print-targets)

ifeq "$(call lp.help.is-enabled)" "true"
$(call lp.fn.publicize-phony-targets, help)
endif

$(foreach feature, tsc bundle format clean, \
	$(foreach target, $(call lp.$(feature).get-phony-targets), \
        $(foreach help, $(call lp.help.get-phony-targets), \
		    $(eval $(call lp.fn.create-diagnostics-target, $(help), $(target)))) \
	 ) \
 )

#-----------------------------------------------------------------------------------------------------------------------
# Compile
#-----------------------------------------------------------------------------------------------------------------------

ifeq "$(call lp.tsc.is-enabled)" "true"

$(call lp.fn.declare-phony-targets, tsc, $(call lp.tsc.get-targets))

$(call lp.tsc.get-targets) : $(call lp.tsc.get-prerequisites)
	$(call lp.tsc.get-command-with-hooks, Compiling...)

else

.PHONY: $(foreach name, $(call lp.tsc.get-phony-targets), lp.$(name))

$(foreach name, $(call lp.tsc.get-phony-targets), lp.$(name)) : ;
	$(error Compiling is disabled)

endif











# #-----------------------------------------------------------------------------------------------------------------------
# # Bundle
# #-----------------------------------------------------------------------------------------------------------------------

# ifeq "$(call lp.bundle.is-enabled)" "true"

# ifneq "$(call lp.bundle.get-targets)" ""

# $(call lp.fn.declare-phony-targets, bundle, $(call lp.bundle.get-targets))

# $(call lp.bundle.get-targets) : $(call lp.bundle.get-prerequisites)
# 	$(call lp.fn.get-command, bundle, Bundling...)

# else

# $(call lp.fn.declare-phony-targets, bundle, lp.target.bundle)

# lp.target.bundle : $(call lp.bundle.get-prerequisites)
#     ifeq "$(call lp.bundle.get-command)" "$(call lp.bundle.get-default-command)"
# 		$(error No bundles have been defined. Call lp.bundle.add-bundle first)
#     else
# 		$(call lp.fn.get-command, bundle, Bundling...)
#     endif
# endif

# endif

# #-----------------------------------------------------------------------------------------------------------------------
# # Format
# #-----------------------------------------------------------------------------------------------------------------------

# ifeq "$(call lp.format.is-enabled)" "true"

# $(call lp.fn.declare-phony-targets, format, lp.target.format)

# lp.target.format :
#     ifeq "$(call lp.format.get-globs)" ""
#         ifeq "$(call lp.format.get-default-command)" "$(call lp.format.get-command)"
# 			$(error No file patterns are configured. Call lp.format.include-files or lp.format.exclude-files or don't call lp.format.disable-defaults)
#         else
# 			$(call lp.fn.get-command, format, Reformatting...)
#         endif
#     else
# 		$(call lp.fn.get-command, format, Reformatting...)
#     endif

# endif

# #-----------------------------------------------------------------------------------------------------------------------
# # Clean
# #-----------------------------------------------------------------------------------------------------------------------

# ifeq "$(call lp.clean.is-enabled)" "true"

# clean:
#     ifeq "$(call lp.clean.get-default-command)" "$(call lp.clean.get-command)"
# 		$(if $(wildcard $(call lp.clean.get-files)), $(call lp.clean.get-command))
#     else
# 		$(call lp.clean.get-command)
#     endif

# endif
