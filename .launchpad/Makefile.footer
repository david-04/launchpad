#-----------------------------------------------------------------------------------------------------------------------
# Help
#-----------------------------------------------------------------------------------------------------------------------

$(foreach name, $(call lp.help.get-phony-targets), lp.$(name)) : ;
	$(info )
	$(call lp.help.print-targets)

ifeq "$(call lp.help.is-enabled)" "true"
$(call lp.fn.publicize-phony-targets, help)
endif

#-----------------------------------------------------------------------------------------------------------------------
# Diagnostics
#-----------------------------------------------------------------------------------------------------------------------

lp.diagnostics : ;
	       $(call lp.fn.print-diagnostics-for-target, tsc    ) \
	$(info )$(call lp.fn.print-diagnostics-for-target, bundle ) \
	$(info )$(call lp.fn.print-diagnostics-for-target, format ) \
	$(info )$(call lp.fn.print-diagnostics-for-target, clean  )

$(foreach target, $(call lp.tsc.get-phony-targets), lp.diagnostics.$(target)) : ;
	$(call lp.fn.print-diagnostics-for-target, tsc)

$(foreach target, $(call lp.bundle.get-phony-targets), lp.diagnostics.$(target)) : ;
	$(call lp.fn.print-diagnostics-for-target, bundle)

$(foreach target, $(call lp.format.get-phony-targets), lp.diagnostics.$(target)) : ;
	$(call lp.fn.print-diagnostics-for-target, format)

$(foreach target, $(call lp.clean.get-phony-targets), lp.diagnostics.$(target)) : ;
	$(call lp.fn.print-diagnostics-for-target, clean)

ifeq "$(call lp.diagnostics.is-enabled)" "true"

$(call lp.fn.publicize-phony-targets, diagnostics)
$(foreach name, \
	$(foreach target, tsc bundle format clean, $(call lp.$(strip $(target)).get-phony-targets)), \
	$(eval .PHONY: diagnostics.$(name)) $(eval diagnostics.$(name) : lp.diagnostics.$(name);) \
)

endif

#-----------------------------------------------------------------------------------------------------------------------
# Compile
#-----------------------------------------------------------------------------------------------------------------------

.PHONY: $(foreach name, $(call lp.tsc.get-phony-targets), lp.$(name))

ifeq "$(call lp.tsc.is-enabled)" "true"

$(call lp.fn.declare-phony-targets, tsc, $(call lp.tsc.get-targets))

$(call lp.tsc.get-targets) : $(call lp.tsc.get-prerequisites)
	$(call lp.fn.get-command, Compiling..., tsc)

else

$(foreach name, $(call lp.tsc.get-phony-targets), lp.$(name)) : ;
	$(error Compiling is disabled)

endif

# #-----------------------------------------------------------------------------------------------------------------------
# # Bundle
# #-----------------------------------------------------------------------------------------------------------------------

# ifeq "$(call lp.bundle.is-enabled)" "true"

# ifneq "$(call lp.bundle.get-targets)" ""

# $(call lp.fn.declare-phony-targets, bundle, $(call lp.bundle.get-targets))

# $(call lp.bundle.get-targets) : $(call lp.bundle.get-prerequisites)
# 	$(call lp.fn.get-command, Bundling..., bundle)

# else

# $(call lp.fn.declare-phony-targets, bundle, lp.target.bundle)

# lp.target.bundle : $(call lp.bundle.get-prerequisites)
#     ifeq "$(call lp.bundle.get-command)" "$(call lp.bundle.get-default-command)"
# 		$(error No bundles have been defined. Call lp.bundle.add-bundle first)
#     else
# 		$(call lp.fn.get-command, Bundling..., bundle)
#     endif
# endif

# endif

# #-----------------------------------------------------------------------------------------------------------------------
# # Format
# #-----------------------------------------------------------------------------------------------------------------------

# ifeq "$(call lp.format.is-enabled)" "true"

# $(call lp.fn.declare-phony-targets, format, lp.target.format)

# lp.target.format :
#     ifeq "$(call lp.format.get-globs)" ""
#         ifeq "$(call lp.format.get-default-command)" "$(call lp.format.get-command)"
# 			$(error No file patterns are configured. Call lp.format.include-files or lp.format.exclude-files or don't call lp.format.disable-defaults)
#         else
# 			$(call lp.fn.get-command, Reformatting..., format)
#         endif
#     else
# 		$(call lp.fn.get-command, Reformatting..., format)
#     endif

# endif

# #-----------------------------------------------------------------------------------------------------------------------
# # Clean
# #-----------------------------------------------------------------------------------------------------------------------

# ifeq "$(call lp.clean.is-enabled)" "true"

# clean:
#     ifeq "$(call lp.clean.get-default-command)" "$(call lp.clean.get-command)"
# 		$(if $(wildcard $(call lp.clean.get-files)), $(call lp.clean.get-command))
#     else
# 		$(call lp.clean.get-command)
#     endif

# endif
