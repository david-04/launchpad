#-----------------------------------------------------------------------------------------------------------------------
# Environment and settings
#-----------------------------------------------------------------------------------------------------------------------

__LP_SCRIPT_HOME                       :=.launchpad
__LP_SETTINGS_FILE                     :=$(__LP_SCRIPT_HOME)/settings.cfg

include $(__LP_SETTINGS_FILE)

#-----------------------------------------------------------------------------------------------------------------------
# Utility functions
#-----------------------------------------------------------------------------------------------------------------------

lp.fn.wildcard                          =$(foreach d,$(wildcard $(1:=/*)),$(call lp.fn.wildcard,$d,$2) $(filter $(subst *,%,$2),$d))
lp.fn.config-error                      =$(info Invalid configuration property in $(__LP_SETTINGS_FILE):) \
                                         $(error $(strip $(1)) must be $(strip $(2)) (current value: $(strip $($(1)))))
lp.fn.empty-to                          =$(if $(strip $(1)),$(strip $(1)),$(strip $(2)))
lp.fn.print-header                      =$(info #-----------------------------------------------------------------------------------------------------------------------) \
                                         $(info # $(strip $(1))) \
                                         $(info #-----------------------------------------------------------------------------------------------------------------------)
lp.fn.print-property                    =$(info ) $(info $(strip $(1):)) $(info $(call lp.fn.empty-to, $(strip $(call $(2))), $(3)))
lp.fn.if-true                           =$(if $(strip $(subst false,,$(call $(1)))),$(2),$(3))
lp.fn.phony-targets                     =$(eval $(foreach target,$(1),$(call lp.fn.phony-target,$(target),$(2),$(3))))

define lp.fn.phony-target

.PHONY: $(1)

$(if $(strip $(doc.target)), $(call doc.target,$(target), $(2)))

$(1) : $(3);

endef

#-----------------------------------------------------------------------------------------------------------------------
# General variables
#-----------------------------------------------------------------------------------------------------------------------

__LP_MAKEFILES                          =Makefile \
                                         $(__LP_SCRIPT_HOME)/Makefile.header \
                                         $(__LP_SCRIPT_HOME)/Makefile.footer \
                                         $(wildcard Makefile* $(__LP_SCRIPT_HOME)/Makefile*)
__LP_TSCONFIG_JSON                      =tsconfig.json $(__LP_SCRIPT_HOME)/tsconfig.default.json \
                                         $(wildcard tsconfig*.json $(__LP_SCRIPT_HOME)/tsconfig*.json)

#-----------------------------------------------------------------------------------------------------------------------
# Compile
#-----------------------------------------------------------------------------------------------------------------------

__LP_TSC_ENABLED                        =true
__LP_TSC_BUILDINFO                      =$(LP_SETTINGS_TSC_OUT_DIR)/.tsbuildinfo
__LP_TSC_DEFAULT_PREREQUISITES          =$(call lp.fn.wildcard, $(LP_SETTINGS_SRC_DIR), *) $(__LP_TSCONFIG_JSON) $(__LP_MAKEFILES)
__LP_TSC_EFFECTIVE_PREREQUISITES        =$(__LP_TSC_DEFAULT_PREREQUISITES)
__LP_TSC_DEFAULT_TARGETS                =$(__LP_TSC_BUILDINFO)
__LP_TSC_EFFECTIVE_TARGETS              =$(__LP_TSC_DEFAULT_TARGETS)
__LP_TSC_DEFAULT_BEFORE_HOOKS           =
__LP_TSC_EFFECTIVE_BEFORE_HOOKS         =$(__LP_TSC_DEFAULT_BEFORE_HOOKS)
__LP_TSC_DEFAULT_AFTER_HOOKS            =touch "$(__LP_TSC_BUILDINFO)"
__LP_TSC_EFFECTIVE_AFTER_HOOKS          =$(__LP_TSC_DEFAULT_AFTER_HOOKS)
__LP_TSC_DEFAULT_COMMAND                =tsc -b
__LP_TSC_EFFECTIVE_COMMAND              =$(__LP_TSC_DEFAULT_COMMAND)

lp.tsc.disable                          =$(eval __LP_TSC_ENABLED=)
lp.tsc.add-extra-prerequisites          =$(eval __LP_TSC_EFFECTIVE_PREREQUISITES+= $(strip $(1)))
lp.tsc.overwrite-prerequisites          =$(eval __LP_TSC_EFFECTIVE_PREREQUISITES=$(strip $(1)))
lp.tsc.add-extra-targets                =$(eval __LP_TSC_EFFECTIVE_TARGETS+= $(strip $(1)))
lp.tsc.overwrite-targets                =$(if $(strip $(1)), $(eval __LP_TSC_EFFECTIVE_TARGETS=$(strip $(1))), $(error Missing parameter in lp.tsc.overwrite-targets))
lp.tsc.add-before-hook                  =$(if $(strip $(1)), $(if $(strip $(__LP_TSC_EFFECTIVE_BEFORE_HOOKS)), $(eval __LP_TSC_EFFECTIVE_BEFORE_HOOKS+= && $(strip $(1))), $(eval __LP_TSC_EFFECTIVE_BEFORE_HOOKS=$(strip $(1)))))
lp.tsc.overwrite-before-hooks           =$(eval __LP_TSC_EFFECTIVE_BEFORE_HOOKS=$(strip $(1)))
lp.tsc.add-after-hook                   =$(if $(strip $(1)), $(if $(strip $(__LP_TSC_EFFECTIVE_AFTER_HOOKS)), $(eval __LP_TSC_EFFECTIVE_AFTER_HOOKS+= && $(strip $(1))), $(eval __LP_TSC_EFFECTIVE_AFTER_HOOKS=$(strip $(1)))))
lp.tsc.overwrite-after-hooks            =$(eval __LP_TSC_EFFECTIVE_AFTER_HOOKS=$(strip $(1)))
lp.tsc.overwrite-command                =$(eval __LP_TSC_EFFECTIVE_COMMAND=$(strip $(1)))

lp.tsc.get-description                  =run the TypeScript compiler
lp.tsc.is-enabled                       =$(strip $(__LP_TSC_ENABLED))
lp.tsc.get-default-prerequisites        =$(strip $(__LP_TSC_DEFAULT_PREREQUISITES))
lp.tsc.get-prerequisites                =$(strip $(__LP_TSC_EFFECTIVE_PREREQUISITES))
lp.tsc.get-default-targets              =$(strip $(__LP_TSC_DEFAULT_TARGETS))
lp.tsc.get-targets                      =$(strip $(__LP_TSC_EFFECTIVE_TARGETS))
lp.tsc.get-default-before-hook          =$(strip $(__LP_TSC_DEFAULT_BEFORE_HOOKS))
lp.tsc.get-before-hook                  =$(strip $(__LP_TSC_EFFECTIVE_BEFORE_HOOKS))
lp.tsc.get-default-after-hook           =$(strip $(__LP_TSC_DEFAULT_AFTER_HOOKS))
lp.tsc.get-after-hook                   =$(strip $(__LP_TSC_EFFECTIVE_AFTER_HOOKS))
lp.tsc.get-default-command              =$(strip $(__LP_TSC_DEFAULT_COMMAND))
lp.tsc.get-command                      =$(strip $(__LP_TSC_EFFECTIVE_COMMAND))
lp.tsc.print-diagnostics                =$(call lp.fn.print-header, Compile) \
                                         $(call lp.fn.print-property, Enabled,       lp.tsc.is-enabled,        false  ) \
                                         $(call lp.fn.print-property, Prerequisites, lp.tsc.get-prerequisites, <none> ) \
                                         $(call lp.fn.print-property, Targets,       lp.tsc.get-targets,       <none> ) \
                                         $(call lp.fn.print-property, Before-hook,   lp.tsc.get-before-hooks,  <none> ) \
                                         $(call lp.fn.print-property, Command,       lp.tsc.get-command,       <none> ) \
                                         $(call lp.fn.print-property, After-hook,    lp.tsc.get-after-hooks,   <none> )

#-----------------------------------------------------------------------------------------------------------------------
# Bundle
#-----------------------------------------------------------------------------------------------------------------------

# __LP_BUNDLER_DEFAULT_PREREQUISITES      =$(__LP_TSC_BUILDINFO) $(__LP_SETTINGS_FILE) $(__LP_MAKEFILES)
# __LP_BUNDLER_EFFECTIVE_PREREQUISITES    =$(__LP_BUNDLER_DEFAULT_PREREQUISITES)
# __LP_BUNDLER_DEFAULT_TARGETS            =
# __LP_BUNDLER_EFFECTIVE_TARGETS          =$(__LP_BUNDLER_DEFAULT_TARGETS)
# __LP_BUNDLER_DEFAULT_BEFORE_HOOKS       =
# __LP_BUNDLER_EFFECTIVE_BEFORE_HOOKS     =$(__LP_BUNDLER_DEFAULT_BEFORE_HOOKS)
# __LP_BUNDLER_DEFAULT_AFTER_HOOKS        =
# __LP_BUNDLER_EFFECTIVE_AFTER_HOOKS      =$(__LP_BUNDLER_DEFAULT_AFTER_HOOKS)
# __LP_BUNDLER_DEFAULT_COMMAND            =esbuild $(__LP_ESBUILD_MAPPINGS) $(__LP_ESBUILD_OPTIONS)
# __LP_BUNDLER_EFFECTIVE_COMMAND          =$(__LP_BUNDLER_DEFAULT_COMMAND)
# __LP_ESBUILD_MAPPINGS                   =

# ifeq "$(LP_SETTINGS_BUNDLER)" "esbuild"
#     __LP_BUNDLER_ENABLED=true
# else ifeq "$(LP_SETTINGS_BUNDLER)" "disabled"
#     __LP_BUNDLER_ENABLED=false
# else
#     $(call lp.fn.config-error, LP_SETTINGS_BUNDLER, "esbuild" or "disabled")
# endif

# __LP_ESBUILD_OPTIONS=--bundle \
#                      --outdir=$(LP_SETTINGS_BUNDLER_OUT_DIR) \
#                      --minify \
#                      --sourcemap=linked \
#                      --outdir=$(LP_SETTINGS_BUNDLER_OUT_DIR) \
#                      --outbase=$(LP_SETTINGS_SRC_DIR)

# ifeq "$(LP_SETTINGS_RUNTIME)" "web"
#     _LP_ESBUILD_OPTIONS += --platform=browser --target=es6 --jsx=transform
# else ifeq "$(LP_SETTINGS_RUNTIME)" "node"
#     _LP_ESBUILD_OPTIONS += --platform=node --target=es2022
# else
#     $(call lp.fn.config-error, LP_SETTINGS_RUNTIME, "node" or "web")
# endif

# ifeq "$(LP_SETTINGS_MODULE)" "esmodules"
#     LP_ESBUILD_OPTIONS += --format=esm
# else ifeq "$(LP_SETTINGS_MODULE)" "commonjs"
#     LP_ESBUILD_OPTIONS += --format=cjs
# else
#     $(call lp.fn.config-error, LP_SETTINGS_BUNDLER, "esmodules" or "commonjs")
# endif

# ifeq "$(LP_SETTINGS_ARTIFACT)" "application"
#     LP_ESBUILD_OPTIONS +=  --sources-content=false
# else ifeq "$(LP_SETTINGS_ARTIFACT)" "libray"
#     LP_ESBUILD_OPTIONS +=  --sources-content=true
# else
#     $(call lp.fn.config-error, LP_SETTINGS_BUNDLER, "application" or "library")
# endif

# lp.bundler.disable                      =$(eval __LP_BUNDLER_ENABLED=false)
# lp.bundler.add-extra-prerequisites      =$(eval __LP_BUNDLER_EFFECTIVE_PREREQUISITES+= $(1))
# lp.bundler.overwrite-prerequisites      =$(eval __LP_BUNDLER_EFFECTIVE_PREREQUISITES=$(1))
# lp.bundler.add-extra-targets            =$(eval __LP_BUNDLER_EFFECTIVE_TARGETS+= $(1))
# lp.bundler.overwrite-targets            =$(if $(strip $(1)), $(eval __LP_BUNDLER_EFFECTIVE_TARGETS=$(1)), $(error No parameter was passed to lp.bundler.overwrite-targets))
# lp.bundler.add-before-hook              =$(if $(strip $(1)), $(if $(strip $(__LP_BUNDLER_EFFECTIVE_BEFORE_HOOKS)), $(eval __LP_BUNDLER_EFFECTIVE_BEFORE_HOOKS+= && $(1)), $(eval __LP_BUNDLER_EFFECTIVE_BEFORE_HOOKS=$(1))))
# lp.bundler.overwrite-before-hooks       =$(eval __LP_BUNDLER_EFFECTIVE_BEFORE_HOOKS=$(1))
# lp.bundler.add-after-hook               =$(if $(strip $(1)), $(if $(strip $(__LP_BUNDLER_EFFECTIVE_AFTER_HOOKS)), $(eval __LP_BUNDLER_EFFECTIVE_AFTER_HOOKS+= && $(1)), $(eval __LP_BUNDLER_EFFECTIVE_AFTER_HOOKS=$(1))))
# lp.bundler.overwrite-after-hooks        =$(eval __LP_BUNDLER_EFFECTIVE_AFTER_HOOKS=$(1))
# lp.bundler.overwrite-command            =$(eval __LP_BUNDLER_EFFECTIVE_COMMAND=$(1))

# lp.bundler.get-default-prerequisites    =$(__LP_BUNDLER_DEFAULT_PREREQUISITES)
# lp.bundler.get-prerequisites            =$(__LP_BUNDLER_EFFECTIVE_PREREQUISITES)
# lp.bundler.get-default-targets          =$(__LP_BUNDLER_DEFAULT_TARGETS)
# lp.bundler.get-targets                  =$(__LP_BUNDLER_EFFECTIVE_TARGETS)
# lp.bundler.get-default-before-hooks     =$(__LP_BUNDLER_DEFAULT_BEFORE_HOOKS)
# lp.bundler.get-before-hooks             =$(__LP_BUNDLER_EFFECTIVE_BEFORE_HOOKS)
# lp.bundler.get-default-after-hooks      =$(__LP_BUNDLER_DEFAULT_AFTER_HOOKS)
# lp.bundler.get-after-hooks              =$(__LP_BUNDLER_EFFECTIVE_AFTER_HOOKS)
# lp.bundler.get-default-command          =$(__LP_BUNDLER_DEFAULT_COMMAND)
# lp.bundler.get-command                  =$(__LP_BUNDLER_EFFECTIVE_COMMAND)



# # $(call lp.bundler.add-bundle, scripts/launchpad-lib, launpad-lib)

# lp.bundler.add-bundle=$(if \
#     $(strip $(1)), \
#     $(if \
#         $(strip $(2)), \
#         $(eval __LP_ESBUILD_MAPPINGS+= $(LP_SETTINGS_BUNDLER_OUT_DIR)/$(strip $(2))=$(LP_SETTINGS_SRC_DIR)/$(strip $(1).ts)), \
#         $(error No target bundle name was passed to lp.bundler.add-bundle) \
#     ), \
#     $(error No entry point was passed to lp.bundler.add-bundle) \
# )

# $(call lp.bundler.add-bundle, scripts/launchpad-lib, launchpad-lib)

#-----------------------------------------------------------------------------------------------------------------------
# Diagnostics
#-----------------------------------------------------------------------------------------------------------------------

lp.diagnostics.get-description          =dump Makefile rules and settings
