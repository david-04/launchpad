.SECONDEXPANSION:

#-----------------------------------------------------------------------------------------------------------------------
# Files and directories
#-----------------------------------------------------------------------------------------------------------------------

__LP_HOME_DIR                  :=$(strip $(patsubst %/Makefile.header,%,$(lastword $(MAKEFILE_LIST))))
__LP_SETTINGS_CFG              :=$(strip $(__LP_HOME_DIR)/settings.cfg)
__LP_MAKEFILE_HEADER           :=$(strip $(__LP_HOME_DIR)/Makefile.header)
__LP_MAKEFILE_FOOTER           :=$(strip $(__LP_HOME_DIR)/Makefile.footer)
__LP_TSCONFIG_DEFAULT_JSON     :=$(strip $(__LP_HOME_DIR)/tsconfig.default.json)
__LP_MAKEFILES                 :=Makefile $(foreach ext, header footer, $(__LP_HOME_DIR)/Makefile.$(ext)) $(wildcard Makefile*)
__LP_MAKEFILES_AND_SETTINGS    :=$(__LP_MAKEFILES) $(__LP_SETTINGS_CFG)
__LP_TSCONFIG_JSON             :=tsconfig.json $(__LP_TSCONFIG_DEFAULT_JSON) $(wildcard tsconfig*.json)

#-----------------------------------------------------------------------------------------------------------------------
#
#    ######## ##     ## ##    ##  ######  ######## ####  #######  ##    ##  ######
#    ##       ##     ## ###   ## ##    ##    ##     ##  ##     ## ###   ## ##    ##
#    ##       ##     ## ####  ## ##          ##     ##  ##     ## ####  ## ##
#    ######   ##     ## ## ## ## ##          ##     ##  ##     ## ## ## ##  ######
#    ##       ##     ## ##  #### ##          ##     ##  ##     ## ##  ####       ##
#    ##       ##     ## ##   ### ##    ##    ##     ##  ##     ## ##   ### ##    ##
#    ##        #######  ##    ##  ######     ##    ####  #######  ##    ##  ######
#
#-----------------------------------------------------------------------------------------------------------------------

__LP_EMPTY_STRING               =#
__LP_BLANK                      =$(__LP_EMPTY_STRING) $(__LP_EMPTY_STRING)#
__LP_COMMA                      =,

#-----------------------------------------------------------------------------------------------------------------------
# General purpose functions
#-----------------------------------------------------------------------------------------------------------------------

lp.fn.assert.param-not-empty    =$(if $(strip $(2)),,$(error Missing parameter in $(if $(strip $(1)), call to $(strip $(1), function call))))

lp.fn.map.empty-to              =$(if $(strip $(1)),$(strip $(1)),$(strip $(2)))

lp.fn.print.header              =$(info #-----------------------------------------------------------------------------------------------------------------------) \
                                 $(info # $(strip $(1))) \
                                 $(info #-----------------------------------------------------------------------------------------------------------------------)
lp.fn.print.indented            =$(info $(__LP_EMPTY_STRING)   $(strip $(1)))

lp.fn.var.assign                =$(eval $(strip $(1))=$(strip $(2)))
lp.fn.var.append                =$(if $(strip $(2)), $(eval $(strip $(1))$(if $(strip $(2)),+= ,)$(strip $(2))))
lp.fn.var.erase                 =$(call lp.fn.var.assign, $(1),)
lp.fn.var.append-with-separator =$(if $(strip $(3)), \
                                     $(if $(strip $($(strip $(1)))), \
                                        $(call lp.fn.var.append, $(1), $(strip $(2)) $(strip $(3))), \
                                        $(call lp.fn.var.assign, $(1), $(strip $(3))) \
                                      ) \
                                  )

lp.fn.wildcard                  =$(call lp.fn.normalize.file-paths, $(patsubst %/,,$(wildcard $(patsubst %,%/,$(foreach d,$(wildcard $(1:=/*)),$(call lp.fn.wildcard,$d,$2) $(filter $(subst *,%,$2),$d))))))
lp.fn.normalize.file-paths      =$(foreach path, $(1), $(patsubst %/,%,$(patsubst ./%,%,$(path))))

lp.fn.if.equal                  =$(if $(patsubst $(strip $(1)),,$(strip $(2))),$(strip $(4)), \
                                 $(if $(patsubst $(strip $(2)),,$(strip $(1))),$(strip $(4)),$(strip $(3))))

#-----------------------------------------------------------------------------------------------------------------------
# Functions for normalizing and validating configuration properties
#-----------------------------------------------------------------------------------------------------------------------

lp.fn.config.normalize.string   =$(call lp.fn.var.assign, $(strip $(1)), $(strip $($(strip $(1)))))
lp.fn.config.normalize.enum     =$(call lp.fn.var.assign, $(strip $(1)), $(strip $(patsubst %::pinned,%,$($(strip $(1))))))
lp.fn.config.normalize.disabled =$(if $(filter disabled, $($(strip $(1)))),$(call lp.fn.var.erase, $(1)))

lp.fn.config.clean-enums        =$(strip $(filter-out or, $(subst ",,$(subst $(__LP_COMMA),,$(strip $(1))))))
lp.fn.config.extract-enums      =$(strip $(filter $(call lp.fn.config.clean-enums, $($(strip $(1))_ENUMS)), $($(strip $(1)))))

lp.fn.config.assert.not-empty   =$(if $(strip $($(strip $(1)))),,$(call lp.fn.config.fail.missing-value, $(1), $($(strip $(1))_ENUMS)))
lp.fn.config.assert.valid-enum  =$(if $(call lp.fn.config.extract-enums, $(1)),,$(call lp.fn.config.fail.invalid-enum, $(1)))
lp.fn.config.assert.single-enum =$(if $(patsubst 1%,%,$(words $(strip $($(strip $(1)))))), $(call lp.fn.config.fail.invalid-enum, $(1)))
lp.fn.config.assert.enum        =$(foreach fn, not-empty valid-enum single-enum, $(call lp.fn.config.assert.$(fn), $(1)))

lp.fn.config.fail               =$(info Invalid configuration in $(__LP_SETTINGS_CFG)) \
                                 $(info $(strip $(1))) \
                                 $(info ) \
                                 $(error $(__LP_BLANK))
lp.fn.config.fail.missing-value =$(call lp.fn.config.fail, $(1) is not set $(if $(2), (should be $(strip $(2)))))
lp.fn.config.fail.invalid-enum  =$(call lp.fn.config.fail, $(strip $(1)) must be $($(strip $(1))_ENUMS) (current value: "$(strip $($(strip $(1)))")))

lp.fn.config.validate-enum      =$(call lp.fn.config.normalize.enum, $(1))\
                                 $(call lp.fn.config.assert.enum, $(1))\
                                 $(call lp.fn.config.normalize.disabled, $(1))

#-----------------------------------------------------------------------------------------------------------------------
# Functions for configuring and creating targets
#-----------------------------------------------------------------------------------------------------------------------

lp.fn.get-command           =$(strip $(if $(strip $(2)), echo "$(strip $(2))" && ) \
                                 $(if $(call lp.$(strip $(1)).get-before-hooks), $(call lp.$(strip $(1)).get-before-hooks) &&) \
                                 $(call lp.$(strip $(1)).get-effective-command) \
                                 $(if $(call lp.$(strip $(1)).get-after-hooks), && $(call lp.$(strip $(1)).get-after-hooks)) \
                             )

lp.fn.declare-phony-targets =$(foreach target, \
                                 $(call lp.$(strip $(1)).get-phony-targets), \
                                 $(eval $(call lp.fn.declare-phony-target,$(target),$(call lp.$(strip $(1)).get-description),$(2))) \
                              )

define lp.fn.declare-phony-target
$(if $(strip $(doc.target)), $(call doc.target,$(target), $(2)))
#----
.PHONY: lp.$(1) $(1)
lp.$(1) $(1) : $(3);
endef

lp.fn.publicize-phony-targets=$(foreach target, \
                                 $(call lp.$(strip $(1)).get-phony-targets), \
                                 $(eval $(call lp.fn.publicize-phony-target,$(target),$(call lp.$(strip $(1)).get-description))) \
                              )

define lp.fn.publicize-phony-target
$(if $(strip $(doc.target)), $(call doc.target,$(target), $(2)))
#----
.PHONY: $(1)
$(1) : lp.$(1);
endef

#-----------------------------------------------------------------------------------------------------------------------
#
#     ######   #######  ##    ## ######## ####  ######
#    ##    ## ##     ## ###   ## ##        ##  ##    ##
#    ##       ##     ## ####  ## ##        ##  ##
#    ##       ##     ## ## ## ## ######    ##  ##   ####
#    ##       ##     ## ##  #### ##        ##  ##    ##
#    ##    ## ##     ## ##   ### ##        ##  ##    ##
#     ######   #######  ##    ## ##       ####  ######
#
#-----------------------------------------------------------------------------------------------------------------------

include $(__LP_SETTINGS_CFG)

LP_SETTINGS_ARTIFACT_ENUMS="app" or "lib"
$(call lp.fn.config.validate-enum, LP_SETTINGS_ARTIFACT)

LP_SETTINGS_RUNTIME_ENUMS="node" or "web"
$(call lp.fn.config.validate-enum, LP_SETTINGS_RUNTIME)

LP_SETTINGS_MODULE_SYSTEM_ENUMS="cjs" or "esm"
$(call lp.fn.config.validate-enum, LP_SETTINGS_MODULE_SYSTEM)

LP_SETTINGS_BUNDLER_ENUMS="disabled" or "esbuild"
$(call lp.fn.config.validate-enum, LP_SETTINGS_BUNDLER)

__LP_DEFAULT_DTS_BUNDLER=dts-bundle-generator
LP_SETTINGS_DTS_BUNDLER_ENUMS="disabled" or "$(__LP_DEFAULT_DTS_BUNDLER)"
$(call lp.fn.config.validate-enum, LP_SETTINGS_DTS_BUNDLER)

LP_SETTINGS_FORMATTER_ENUMS="disabled", "biome" or "prettier"
$(call lp.fn.config.validate-enum, LP_SETTINGS_FORMATTER)

LP_SETTINGS_PACKAGE_MANAGER_ENUMS="npm", "pnpm" or "yarn"
$(call lp.fn.config.validate-enum, LP_SETTINGS_PACKAGE_MANAGER)

LP_SETTINGS_INSTALLATION_MODE_ENUMS="local", "global", "temp", "npx", "pnpm-dlx" or "yarn-dlx"
$(call lp.fn.config.validate-enum, LP_SETTINGS_INSTALLATION_MODE)

$(call lp.fn.config.normalize.string, LP_SETTINGS_SRC_DIR)
$(call lp.fn.config.assert.not-empty, LP_SETTINGS_SRC_DIR)

LP_SETTINGS_UPLIFT_DEPENDENCIES_ENUMS="true" or "false"
$(call lp.fn.config.validate-enum, LP_SETTINGS_UPLIFT_DEPENDENCIES)
ifeq "$(LP_SETTINGS_UPLIFT_DEPENDENCIES)" "false"
    LP_SETTINGS_UPLIFT_DEPENDENCIES=
endif

$(call lp.fn.config.normalize.boolean, LP_SETTINGS_UPLIFT_DEPENDENCIES)

$(call lp.fn.config.normalize.string, LP_SETTINGS_TSC_OUT_DIR)
ifeq "$(LP_SETTINGS_TSC_OUT_DIR)" ""
    $(call lp.fn.config.fail, LP_SETTINGS_TSC_OUT_DIR must not be empty)
endif

ifeq "$(LP_SETTINGS_BUNDLER)" ""
    ifneq "$(LP_SETTINGS_DTS_BUNDLER)" ""
        $(call lp.fn.config.fail, LP_SETTINGS_DTS_BUNDLER must be "disabled" when LP_SETTINGS_BUNDLER is "disabled" as well)
    endif
endif

#-----------------------------------------------------------------------------------------------------------------------
#
#    ##     ## ######## ##       ########
#    ##     ## ##       ##       ##     ##
#    ##     ## ##       ##       ##     ##
#    ######### ######   ##       ########
#    ##     ## ##       ##       ##
#    ##     ## ##       ##       ##
#    ##     ## ######## ######## ##
#
#-----------------------------------------------------------------------------------------------------------------------

__LP_HELP_ENABLED          =true
__LP_EXTRA_DOTS            =
__LP_HELP_TARGETS          =$(call lp.help.add-builtin-target, bundle, bundle .............$(__LP_EXTRA_DOTS)) \
                            $(call lp.help.add-builtin-target, clean,  clean ..............$(__LP_EXTRA_DOTS)) \
                            $(call lp.help.add-builtin-target, tsc,    compile ............$(__LP_EXTRA_DOTS)) \
                            $(call lp.help.add-builtin-target, format, format .............$(__LP_EXTRA_DOTS)) \
                            $(call lp.help.add-builtin-target, help,   help ...............$(__LP_EXTRA_DOTS)) \
                            $(call lp.help.add-builtin-target, tsc,    tsc ................$(__LP_EXTRA_DOTS))

lp.help.disable            =$(call lp.fn.var.erase, __LP_HELP_ENABLED)
lp.help.add-extra-dots     =$(call lp.fn.var.assign, __LP_EXTRA_DOTS, $(1))
#lp.help.add-target         =$(call lp.fn.var.append, __LP_HELP_TARGETS, $$(info $$(__LP_EMPTY_STRING) $$(__LP_EMPTY_STRING) $$(strip $(1)) $$(strip $(2))))
lp.help.add-target         =$(call lp.fn.var.append, __LP_HELP_TARGETS, $$(call lp.fn.print.indented, $$(strip $(1)) $$(strip $(2))))
lp.help.add-phony-target   =$(eval .PHONY: $(1)) $(call lp.help.add-target, $(strip $(1)) $(strip $(2)))
lp.help.add-builtin-target =$(if $(call lp.$(strip $(1)).is-enabled),\
                                 $(call lp.fn.print.indented, $(strip $(2)) $(call lp.$(strip $(1)).get-description)) \
                             )
lp.help.get-phony-targets  =help
lp.help.get-description    =list all targets (use help.<target> for diagnostic information)
lp.help.is-enabled         =$(strip $(__LP_HELP_ENABLED))
lp.help.print-targets      =$(__LP_HELP_TARGETS)

lp.fn.print.property       =$(info ) $(info $(strip $(1)):) $(info $(call lp.fn.map.empty-to, $(strip $(call $(2))), $(3)))
lp.fn.print-diagnostics    =$(call lp.fn.print.header, $(call lp.$(strip $(1)).get-name) settings) \
                            $(call lp.fn.print.property, Enabled            , lp.$(strip $(1)).is-enabled             , false  ) \
                            $(call lp.fn.print.property, Phony names        , lp.$(strip $(1)).get-phony-targets      , <none> ) \
                            $(call lp.fn.print.property, Targets            , lp.$(strip $(1)).get-targets            , <none> ) \
                            $(call lp.fn.print.property, Prerequisites      , lp.$(strip $(1)).get-prerequisites      , <none> ) \
                            $(call lp.fn.print.property, Default command    , lp.$(strip $(1)).get-default-command    , <none> ) \
                            $(call lp.fn.print.property, Before-hooks       , lp.$(strip $(1)).get-before-hooks       , <none> ) \
                            $(call lp.fn.print.property, Effective command  , lp.$(strip $(1)).get-effective-command  , <none> ) \
                            $(call lp.fn.print.property, After-hooks        , lp.$(strip $(1)).get-after-hooks        , <none> ) \
                            $(call lp.fn.print.property, Command with hooks , lp.$(strip $(1)).get-command-with-hooks , <none> ) \

define lp.fn.create-diagnostics-target
$(if $(strip $(doc.target)), $(call doc.target,$(target), display diagnostic information for target $(2)))
.PHONY: lp.$(strip $(1)).$(strip $(2)) $(strip $(2)).help $(if $(call lp.help.is-enabled), $(strip $(1)).$(strip $(2)))
lp.$(strip $(1)).$(strip $(2)) $(strip $(2)).help $(if $(call lp.help.is-enabled), $(strip $(1)).$(strip $(2))) : ;
	$$(info )$$(call lp.fn.print-diagnostics, $(2))
endef

#-----------------------------------------------------------------------------------------------------------------------
#
#     ######   #######  ##     ## ########  #### ##       ########
#    ##    ## ##     ## ###   ### ##     ##  ##  ##       ##
#    ##       ##     ## #### #### ##     ##  ##  ##       ##
#    ##       ##     ## ## ### ## ########   ##  ##       ######
#    ##       ##     ## ##     ## ##         ##  ##       ##
#    ##    ## ##     ## ##     ## ##         ##  ##       ##
#     ######   #######  ##     ## ##        #### ######## ########
#
#-----------------------------------------------------------------------------------------------------------------------

__LP_TSC_ENABLED                        =true
__LP_TSC_BUILDINFO                      =$(if $(LP_SETTINGS_TSC_OUT_DIR),$(LP_SETTINGS_TSC_OUT_DIR)/.tsbuildinfo,$(__LP_HOME_DIR)/.tsbuildinfo.tmp)
__LP_TSC_DEFAULT_PREREQUISITES          =$(sort $(call lp.fn.wildcard, $(LP_SETTINGS_SRC_DIR), *) $(__LP_TSCONFIG_JSON) $(__LP_MAKEFILES_AND_SETTINGS))
__LP_TSC_EFFECTIVE_PREREQUISITES        =$(__LP_TSC_DEFAULT_PREREQUISITES)
__LP_TSC_DEFAULT_TARGETS                =$(__LP_TSC_BUILDINFO)
__LP_TSC_EFFECTIVE_TARGETS              =$(__LP_TSC_DEFAULT_TARGETS)
__LP_TSC_DEFAULT_BEFORE_HOOKS           =
__LP_TSC_EFFECTIVE_BEFORE_HOOKS         =$(__LP_TSC_DEFAULT_BEFORE_HOOKS)
__LP_TSC_DEFAULT_AFTER_HOOKS            =
__LP_TSC_EFFECTIVE_AFTER_HOOKS          =$(__LP_TSC_DEFAULT_AFTER_HOOKS)
__LP_TSC_DEFAULT_COMMAND                =$(strip $(if $(LP_SETTINGS_TSC_OUT_DIR), \
                                             tsc -b, \
                                             tsc --noEmit true \
                                                 --tsBuildInfoFile "$(__LP_TSC_BUILDINFO)" \
                                                 $(if $(call lp.bundle.is-dts-enabled), --declaration true) \
                                          )) && touch "$(__LP_TSC_BUILDINFO)"
__LP_TSC_EFFECTIVE_COMMAND              =$(call lp.tsc.get-default-command)

lp.tsc.disable                          =$(call lp.fn.var.erase, __LP_TSC_ENABLED)
lp.tsc.add-extra-prerequisites          =$(call lp.fn.var.append, __LP_TSC_EFFECTIVE_PREREQUISITES, $(1))
lp.tsc.overwrite-prerequisites          =$(call lp.fn.var.assign, __LP_TSC_EFFECTIVE_PREREQUISITES, $(1))
lp.tsc.add-extra-targets                =$(call lp.fn.var.append, __LP_TSC_EFFECTIVE_TARGETS, $(1))
lp.tsc.overwrite-targets                =$(call lp.fn.assert.param-not-empty, lp.tsc.overwrite-targets, $(1)) \
                                         $(call lp.fn.var.assign, __LP_TSC_EFFECTIVE_TARGETS, $(1))
lp.tsc.add-before-hook                  =$(call lp.fn.var.append-with-separator, __LP_TSC_EFFECTIVE_BEFORE_HOOKS, &&, $(1))
lp.tsc.overwrite-before-hooks           =$(call lp.fn.var.assign, __LP_TSC_EFFECTIVE_BEFORE_HOOKS, $(1))
lp.tsc.add-after-hook                   =$(call lp.fn.var.append-with-separator, __LP_TSC_EFFECTIVE_AFTER_HOOKS, &&, $(1))
lp.tsc.overwrite-after-hooks            =$(call lp.fn.var.assign, __LP_TSC_EFFECTIVE_AFTER_HOOKS, $(1))
lp.tsc.overwrite-command                =$(call lp.fn.assert.param-not-empty, lp.tsc.overwrite-command, $(1)) \
                                         $(call lp.fn.var.assign, __LP_TSC_EFFECTIVE_COMMAND, $(1))

lp.tsc.get-phony-targets                =compile tsc
lp.tsc.get-name                         =Compile
lp.tsc.get-description                  =compile TypeScript sources
lp.tsc.is-enabled                       =$(strip $(__LP_TSC_ENABLED))
lp.tsc.get-default-prerequisites        =$(sort $(strip $(__LP_TSC_DEFAULT_PREREQUISITES)))
lp.tsc.get-prerequisites                =$(sort $(strip $(__LP_TSC_EFFECTIVE_PREREQUISITES)))
lp.tsc.get-default-targets              =$(sort $(strip $(__LP_TSC_DEFAULT_TARGETS)))
lp.tsc.get-targets                      =$(sort $(strip $(__LP_TSC_EFFECTIVE_TARGETS)))
lp.tsc.get-default-before-hooks         =$(strip $(__LP_TSC_DEFAULT_BEFORE_HOOKS))
lp.tsc.get-before-hooks                 =$(strip $(__LP_TSC_EFFECTIVE_BEFORE_HOOKS))
lp.tsc.get-default-after-hooks          =$(strip $(__LP_TSC_DEFAULT_AFTER_HOOKS))
lp.tsc.get-after-hooks                  =$(strip $(__LP_TSC_EFFECTIVE_AFTER_HOOKS))
lp.tsc.get-default-command              =$(if $(1), echo $(1) && )$(strip $(__LP_TSC_DEFAULT_COMMAND))
lp.tsc.get-effective-command            =$(strip $(__LP_TSC_EFFECTIVE_COMMAND))
lp.tsc.get-command-with-hooks           =$(call lp.fn.get-command, tsc, $(1))

LP_PREREQUISITE_TSC                     =$$(call lp.tsc.get-targets)

#-----------------------------------------------------------------------------------------------------------------------
#
#    ########  ##     ## ##    ## ########  ##       ########
#    ##     ## ##     ## ###   ## ##     ## ##       ##
#    ##     ## ##     ## ####  ## ##     ## ##       ##
#    ########  ##     ## ## ## ## ##     ## ##       ######
#    ##     ## ##     ## ##  #### ##     ## ##       ##
#    ##     ## ##     ## ##   ### ##     ## ##       ##
#    ########   #######  ##    ## ########  ######## ########
#
#-----------------------------------------------------------------------------------------------------------------------

__LP_BUNDLE_ENABLED                     =$(if $(LP_SETTINGS_BUNDLER),true)
__LP_BUNDLE_DEFAULT_PREREQUISITES       =$(call lp.tsc.get-targets) $(__LP_MAKEFILES_AND_SETTINGS)
__LP_BUNDLE_EFFECTIVE_PREREQUISITES     =$(call lp.bundle.get-default-prerequisites)
__LP_BUNDLE_DEFAULT_TARGETS             =
__LP_BUNDLE_EFFECTIVE_TARGETS           =$(__LP_BUNDLE_DEFAULT_TARGETS)
__LP_BUNDLE_DEFAULT_BEFORE_HOOKS        =
__LP_BUNDLE_EFFECTIVE_BEFORE_HOOKS      =$(__LP_BUNDLE_DEFAULT_BEFORE_HOOKS)
__LP_BUNDLE_DEFAULT_AFTER_HOOKS         =
__LP_BUNDLE_EFFECTIVE_AFTER_HOOKS       =$(__LP_BUNDLE_DEFAULT_AFTER_HOOKS)
__LP_BUNDLE_DEFAULT_COMMAND             =
__LP_BUNDLE_DEFAULT_COMMAND_MSG         =
__LP_BUNDLE_EFFECTIVE_COMMAND           =$(call lp.bundle.get-default-command)

__LP_BUNDLE_COUNT                       =
__LP_BUNDLE_SOURCE_MAPS_ENABLED         =$(call lp.bundle.is-enabled)
__LP_BUNDLE_INLINE_SOURCES_ENABLED      =$(call lp.fn.if.equal, $(LP_SETTINGS_ARTIFACT), app, false, true)
__LP_BUNDLE_MINIFICATION_ENABLED        =$(call lp.bundle.is-enabled)
__LP_BUNDLE_DTS_BUNDLER                 =$(LP_SETTINGS_DTS_BUNDLER)

lp.bundle.append-command.any            =$(call lp.fn.var.append-with-separator, \
                                              $(strip $(1)), &&, $(strip $(2)) \
                                          )
lp.bundle.append-command.message        =$(call lp.bundle.append-command.any, $(1), \
                                              echo "- $(strip $2)" \
                                          )

lp.bundle.append-command.esbuild        =$(call lp.bundle.append-command.any, $(1), \
                                              esbuild \
                                              "$(strip $(2))" \
                                              "--outfile=$(strip $(3))" \
                                              --bundle \
                                              $(if $(__LP_BUNDLE_MINIFICATION_ENABLED),--minify) \
                                              --format=$(LP_SETTINGS_MODULE_SYSTEM) \
                                              $(call lp.fn.if.equal, $(LP_SETTINGS_RUNTIME), web, \
                                                   --platform=browser \
                                                   --target=es6 \
                                                   --jsx=transform, \
                                                   --platform=node \
                                                   --target=es2022 \
                                               ) \
                                              $(if $(strip $(__LP_BUNDLE_SOURCE_MAPS_ENABLED)), \
                                                   --sourcemap=linked \
                                               ) \
                                              $(if $(strip $(__LP_BUNDLE_INLINE_SOURCES_ENABLED)), \
                                                   --sources-content=true \
                                               ) \
                                              --log-level=error \
                                          )
lp.bundle.append-command.dts            =$(call lp.bundle.append-command.any, $(1), \
                                              $(if $(strip $(__LP_BUNDLE_DTS_BUNDLER)), \
                                                   dts-bundle-generator \
                                                       "$(strip $(2))" \
                                                       -o "$(strip $(patsubst %.js, %.d.ts, $(3)))" \
                                                       --no-banner \
                                                       --silent \
                                               ) \
                                          )

lp.bundle.append-command                =$(call lp.fn.var.append, __LP_BUNDLE_COUNT, x) \
                                         $(call lp.bundle.append-command.message, __LP_BUNDLE_DEFAULT_COMMAND_MSG, $(2)) \
                                         $(call lp.bundle.append-command.esbuild, __LP_BUNDLE_DEFAULT_COMMAND_MSG, $(1), $(2)) \
                                         $(call lp.bundle.append-command.dts, __LP_BUNDLE_DEFAULT_COMMAND_MSG, $(1), $(2)) \
                                         $(call lp.bundle.append-command.esbuild, __LP_BUNDLE_DEFAULT_COMMAND, $(1), $(2)) \
                                         $(call lp.bundle.append-command.dts, __LP_BUNDLE_DEFAULT_COMMAND, $(1), $(2))

lp.bundle.add-bundle                    =$(call lp.fn.assert.param-not-empty, lp.bundle.add-bundle, $(1)) \
                                         $(call lp.fn.assert.param-not-empty, lp.bundle.add-bundle, $(2)) \
                                         $(call lp.bundle.append-command, $(1), $(2)) \
                                         $(call lp.fn.var.append, __LP_BUNDLE_DEFAULT_TARGETS, \
                                               $(2) \
                                               $(if $(strip $(__LP_BUNDLE_DTS_BUNDLER)), $(patsubst %.js, %.d.ts, $(2))) \
                                          ) \
                                         $(call lp.format.exclude, $(2) $(patsubst %.js, %.d.ts, $(2)))

lp.bundle.disable                       =$(call lp.fn.var.erase, __LP_BUNDLE_ENABLED)
lp.bundle.add-extra-prerequisites       =$(call lp.fn.var.append, __LP_BUNDLE_EFFECTIVE_PREREQUISITES, $(1))
lp.bundle.overwrite-prerequisites       =$(call lp.fn.var.assign, __LP_BUNDLE_EFFECTIVE_PREREQUISITES, $(1))
lp.bundle.add-extra-targets             =$(call lp.fn.var.append, __LP_BUNDLE_EFFECTIVE_TARGETS, $(1)) \
                                         $(call lp.fn.var.append, __LP_BUNDLE_NAMES, $(1))
lp.bundle.overwrite-targets             =$(call lp.fn.assert.param-not-empty, lp.bundle.overwrite-targets, $(1)) \
                                         $(call lp.fn.var.assign, __LP_BUNDLE_EFFECTIVE_TARGETS, $(1))
lp.bundle.add-before-hook               =$(call lp.fn.var.append-with-separator, __LP_BUNDLE_EFFECTIVE_BEFORE_HOOKS, &&, $(1))
lp.bundle.overwrite-before-hooks        =$(call lp.fn.var.assign. __LP_BUNDLE_EFFECTIVE_BEFORE_HOOKS, $(1))
lp.bundle.add-after-hook                =$(call lp.fn.var.append-with-separator, __LP_BUNDLE_EFFECTIVE_AFTER_HOOKS, &&, $(1))
lp.bundle.overwrite-after-hooks         =$(call lp.fn.var.assign, __LP_BUNDLE_EFFECTIVE_AFTER_HOOKS, $(1))
lp.bundle.overwrite-command             =$(call lp.fn.assert.param-not-empty, lp.bundle.overwrite-command, $(1)) \
                                         $(call lp.fn.var.assign, __LP_BUNDLE_EFFECTIVE_COMMAND, $(1))


lp.bundle.enable-source-maps            =$(call lp.fn.var.assign, __LP_BUNDLE_SOURCE_MAPS_ENABLED, true)
lp.bundle.disable-source-maps           =$(call lp.fn.var.erase, __LP_BUNDLE_SOURCE_MAPS_ENABLED) $(call lp.bundle.disable-inline-sources)
lp.bundle.enable-minification           =$(call lp.fn.var.assign, __LP_BUNDLE_MINIFICATION_ENABLED, true)
lp.bundle.disable-minification          =$(call lp.fn.var.erase, __LP_BUNDLE_MINIFICATION_ENABLED)
lp.bundle.enable-inline-sources         =$(call lp.fn.var.assign, __LP_BUNDLE_INLINE_SOURCES_ENABLED, true) $(call lp.bundle.enable-source-maps)
lp.bundle.disable-inline-sources        =$(call lp.fn.var.erase, __LP_BUNDLE_INLINE_SOURCES_ENABLED)

lp.bundle.assert-no-bundles-yet         =$(if $(__LP_BUNDLE_COUNT),\
                                              $(error Calls to $(strip $(1)) must come before any calls to lp.bundle.add-bundle), \
                                              $(2) \
                                         )
lp.bundle.enable-dts                    =$(call lp.bundle.assert-no-bundles-yet, \
                                                lp.bundle.enable-dts, \
                                                $(call lp.fn.var.assign, __LP_BUNDLER_DTS_BUNDLER, $(if $(LP_SETTINGS_DTS_BUNDLER), $(LP_SETTINGS_DTS_BUNDLER), $(__LP_DEFAULT_DTS_BUNDLER))) \
                                          )
lp.bundle.enable-dts-only-for-targets   =$(call lp.bundle.assert-no-bundles-yet, \
                                                lp.bundle.enable-dts-only-for-targets, \
                                                $(if $(filter $(1), $(MAKECMDGOALS)), $(call lp.bundle.enable-dts), $(call lp.bundle.disable-dts)) \
                                          )
lp.bundle.disable-dts                   =$(call lp.bundle.assert-no-bundles-yet, \
                                                lp.bundle.disable-dts, \
                                                $(call lp.fn.var.erase, __LP_BUNDLE_DTS_BUNDLER) \
                                          )
lp.bundle.disable-dts-only-for-targets  =$(call lp.bundle.assert-no-bundles-yet,\
                                                lp.bundle.disable-dts-only-for-targets, \
                                                $(if $(filter $(1), $(MAKECMDGOALS)), $(call lp.bundle.disable-dts), $(call lp.bundle.enable-dts)) \
                                          )

lp.bundle.get-phony-targets             =bundle
lp.bundle.get-name                      =Bundle
lp.bundle.get-description               =create bundles
lp.bundle.is-enabled                    =$(strip $(__LP_BUNDLE_ENABLED))
lp.bundle.is-dts-enabled                =$(if $(call lp.bundle.is-enabled),$(__LP_BUNDLE_DTS_BUNDLER))
lp.bundle.get-default-prerequisites     =$(sort $(strip $(__LP_BUNDLE_DEFAULT_PREREQUISITES)))
lp.bundle.get-prerequisites             =$(sort $(strip $(__LP_BUNDLE_EFFECTIVE_PREREQUISITES)))
lp.bundle.get-default-targets           =$(sort $(strip $(__LP_BUNDLE_DEFAULT_TARGETS)))
lp.bundle.get-targets                   =$(sort $(strip $(__LP_BUNDLE_EFFECTIVE_TARGETS)))
lp.bundle.get-default-before-hooks      =$(strip $(__LP_BUNDLE_DEFAULT_BEFORE_HOOKS))
lp.bundle.get-before-hooks              =$(strip $(__LP_BUNDLE_EFFECTIVE_BEFORE_HOOKS))
lp.bundle.get-default-after-hooks       =$(strip $(__LP_BUNDLE_DEFAULT_AFTER_HOOKS))
lp.bundle.get-after-hooks               =$(strip $(__LP_BUNDLE_EFFECTIVE_AFTER_HOOKS))
lp.bundle.get-default-command           =$(if $(1), echo $(1) && )$(call lp.fn.if.equal, $(__LP_BUNDLE_COUNT), x, \
                                             $(__LP_BUNDLE_DEFAULT_COMMAND), \
                                             $(__LP_BUNDLE_DEFAULT_COMMAND_MSG), \
                                          )
lp.bundle.get-effective-command         =$(strip $(__LP_BUNDLE_EFFECTIVE_COMMAND))
lp.bundle.get-command-with-hooks        =$(call lp.fn.get-command, bundle, $(1))

LP_PREREQUISITE_BUNDLE                  =$$(call lp.bundle.get-targets)

#-----------------------------------------------------------------------------------------------------------------------
#
#    ########  #######  ########  ##     ##    ###    ########
#    ##       ##     ## ##     ## ###   ###   ## ##      ##
#    ##       ##     ## ##     ## #### ####  ##   ##     ##
#    ######   ##     ## ########  ## ### ## ##     ##    ##
#    ##       ##     ## ##   ##   ##     ## #########    ##
#    ##       ##     ## ##    ##  ##     ## ##     ##    ##
#    ##        #######  ##     ## ##     ## ##     ##    ##
#
#-----------------------------------------------------------------------------------------------------------------------

__LP_FORMAT_ENABLED                     =$(if $(LP_SETTINGS_FORMATTER),true)
__LP_FORMAT_DEFAULT_BEFORE_HOOKS        =
__LP_FORMAT_EFFECTIVE_BEFORE_HOOKS      =$(__LP_FORMAT_DEFAULT_BEFORE_HOOKS)
__LP_FORMAT_DEFAULT_AFTER_HOOKS         =
__LP_FORMAT_EFFECTIVE_AFTER_HOOKS       =$(__LP_FORMAT_DEFAULT_AFTER_HOOKS)
__LP_FORMAT_DEFAULT_COMMAND_prettier    =prettier --write --ignore-unknown $(patsubst %, '%', $(call lp.format.get-files))
__LP_FORMAT_DEFAULT_COMMAND_biome       =biome format --write --files-ignore-unknown=true $(patsubst %, '%', $(call lp.format.get-files))
__LP_FORMAT_DEFAULT_COMMAND             =$(__LP_FORMAT_DEFAULT_COMMAND_$(LP_SETTINGS_FORMATTER))
__LP_FORMAT_EFFECTIVE_COMMAND           =$(call lp.format.get-default-command)
__LP_FORMAT_DEFAULT_FILES               =
__LP_FORMAT_EFFECTIVE_FILES             =$(__LP_FORMAT_DEFAULT_FILES)

__LP_FORMAT_ROOT_LEVEL_DIRECTORIES      =$(filter-out .launchpad .vscode .yarn node_modules,$(call lp.fn.normalize.file-paths, $(wildcard */)))
__LP_FORMAT_EXTENSIONS_prettier         =ts tsx js jsx json html htm css less sass
__LP_FORMAT_EXTENSIONS_biome            =ts tsx js jsx json # html htm css less sass
__LP_FORMAT_EXTENSIONS                  =$(__LP_FORMAT_EXTENSIONS_$(LP_SETTINGS_FORMATTER))


lp.format.to-wildcard                   =$(if $(strip $(1)), $(1), $(patsubst %, *.%, $(__LP_FORMAT_EXTENSIONS)))
lp.format.extract-directories           =$(call lp.fn.normalize.file-paths, $(filter %/, $(wildcard $(patsubst %,%/,$(patsubst %/,%,$(1))))))
lp.format.extract-files                 =$(filter-out $(call lp.format.extract-directories, $(1)), $(call lp.fn.normalize.file-paths, $(1)))
lp.format.expand-files                  =$(if $(call lp.format.extract-directories, $(1)), $(call lp.fn.wildcard, $(1), $(call lp.format.to-wildcard, $(2)))) \
                                         $(call lp.format.extract-files, $(1))
lp.format.add-files-to                  =$(call lp.fn.var.append, $(1), $(filter-out  $($(strip $(1))), $(call lp.fn.normalize.file-paths, $(2))))
lp.format.remove-files-from             =$(call lp.fn.var.assign, $(1), $(filter-out $(call lp.fn.normalize.file-paths, $(2)), $($(strip $(1)))))
lp.format.overwrite-files-for           =$(call lp.fn.var.assign, $(1), $(call lp.fn.normalize.file-paths, $(2)))

$(call lp.format.add-files-to,      __LP_FORMAT_DEFAULT_FILES, $(wildcard $(patsubst %,*.%,$(__LP_FORMAT_EXTENSIONS))))
$(call lp.format.remove-files-from, __LP_FORMAT_DEFAULT_FILES, $(wildcard $(patsubst %,*.min.%,$(__LP_FORMAT_EXTENSIONS))))
$(call lp.format.add-files-to,      __LP_FORMAT_DEFAULT_FILES, $(call lp.fn.wildcard, $(__LP_FORMAT_ROOT_LEVEL_DIRECTORIES), $(patsubst %,*.%,$(__LP_FORMAT_EXTENSIONS))))
$(call lp.format.remove-files-from, __LP_FORMAT_DEFAULT_FILES, $(call lp.fn.wildcard, $(__LP_FORMAT_ROOT_LEVEL_DIRECTORIES), $(patsubst %,*.min.%,$(__LP_FORMAT_EXTENSIONS))))
$(call lp.format.remove-files-from, __LP_FORMAT_DEFAULT_FILES, $(call lp.fn.wildcard, $(LP_SETTINGS_TSC_OUT_DIR) , *))

lp.format.disable                       =$(call lp.fn.var.erase, __LP_FORMAT_ENABLED)
lp.format.add-before-hook               =$(call lp.fn.var.append-with-separator, __LP_FORMAT_EFFECTIVE_BEFORE_HOOKS, &&, $(1))
lp.format.overwrite-before-hooks        =$(call lp.fn.var.assign, __LP_FORMAT_EFFECTIVE_BEFORE_HOOKS, $(1))
lp.format.add-after-hook                =$(call lp.fn.var.append-with-separator, __LP_FORMAT_EFFECTIVE_AFTER_HOOKS, &&, $(1))
lp.format.overwrite-after-hooks         =$(call lp.fn.var.assign, __LP_FORMAT_EFFECTIVE_AFTER_HOOKS, $(1))
lp.format.overwrite-command             =$(call lp.fn.assert.param-not-empty, lp.format.overwrite-command, $(1)) \
                                         $(call lp.fn.var.assign, __LP_FORMAT_EFFECTIVE_COMMAND, $(1))

lp.format.include                       =$(call lp.format.add-files-to, __LP_FORMAT_EFFECTIVE_FILES, $(call lp.format.expand-files, $(1), $(2)))
lp.format.include-only                  =$(call lp.fn.assert.param-not-empty, lp.format.include-only, $(1)) \
                                         $(call lp.format.overwrite-files-for, __LP_FORMAT_EFFECTIVE_FILES, $(call lp.format.expand-files, $(1), $(2)))
lp.format.exclude                       =$(call lp.format.remove-files-from, __LP_FORMAT_EFFECTIVE_FILES, $(call lp.format.expand-files, $(1), $(2)))

lp.format.get-phony-targets             =format reformat
lp.format.get-name                      =Format
lp.format.get-description               =format sources with $(LP_SETTINGS_FORMATTER)
lp.format.is-enabled                    =$(strip $(__LP_FORMAT_ENABLED))
lp.format.get-default-prerequisites     =<n/a>
lp.format.get-prerequisites             =
lp.format.get-default-targets           =<n/a>
lp.format.get-targets                   =
lp.format.get-default-before-hook       =$(strip $(__LP_FORMAT_DEFAULT_BEFORE_HOOKS))
lp.format.get-before-hooks              =$(strip $(__LP_FORMAT_EFFECTIVE_BEFORE_HOOKS))
lp.format.get-default-after-hook        =$(strip $(__LP_FORMAT_DEFAULT_AFTER_HOOKS))
lp.format.get-after-hooks               =$(strip $(__LP_FORMAT_EFFECTIVE_AFTER_HOOKS))
lp.format.get-default-command           =$(if $(1), echo $(1) && )$(strip $(__LP_FORMAT_DEFAULT_COMMAND))
lp.format.get-effective-command         =$(strip $(__LP_FORMAT_EFFECTIVE_COMMAND))
lp.format.get-command-with-hooks        =$(call lp.fn.get-command, format, $(1))
lp.format.get-default-files             =$(sort $(strip $(__LP_FORMAT_DEFAULT_FILES)))
lp.format.get-files                     =$(wildcard $(sort $(strip $(__LP_FORMAT_EFFECTIVE_FILES))))

#-----------------------------------------------------------------------------------------------------------------------
#
#    ########  ##     ## ##    ##
#    ##     ## ##     ## ###   ##
#    ##     ## ##     ## ####  ##
#    ########  ##     ## ## ## ##
#    ##   ##   ##     ## ##  ####
#    ##    ##  ##     ## ##   ###
#    ##     ##  #######  ##    ##
#
#-----------------------------------------------------------------------------------------------------------------------

lp.run.javascript                       =node
lp.run.typescript                       =$(call lp.fn.if.equal, $(LP_SETTINGS_MODULE_SYSTEM), esm, ts-node-esm, ts-node)

lp.run                                  =$(call lp.fn.if.equal, \
                                                $(patsubst %.ts,TypeScript,$(lastword $(strip $(1)))),\
                                                TypeScript,\
                                                $(lp.run.typescript),\
                                                $(lp.run.javascript)) $(1)

#-----------------------------------------------------------------------------------------------------------------------
#
#     ######  ##       ########    ###    ##    ##
#    ##    ## ##       ##         ## ##   ###   ##
#    ##       ##       ##        ##   ##  ####  ##
#    ##       ##       ######   ##     ## ## ## ##
#    ##       ##       ##       ######### ##  ####
#    ##    ## ##       ##       ##     ## ##   ###
#     ######  ######## ######## ##     ## ##    ##
#
#-----------------------------------------------------------------------------------------------------------------------

__LP_CLEAN_ENABLED                      =true
__LP_CLEAN_DEFAULT_COMMAND              =rm -rf $(call lp.clean.get-files)
__LP_CLEAN_EFFECTIVE_COMMAND            =$(__LP_CLEAN_DEFAULT_COMMAND)
__LP_CLEAN_FILES                        =.launchpad/NON_EXISTENT_FILE
__LP_CLEAN_DELETE_BUNDLES               =

lp.clean.disable                        =$(call lp.fn.var.erase, __LP_CLEAN_ENABLED)
lp.clean.overwrite-command              =$(call lp.fn.assert.param-not-empty, lp.clean.overwrite-command, $(1)) \
                                         $(call lp.fn.var.assign, __LP_CLEAN_EFFECTIVE_COMMAND, $(1))

lp.clean.npm-packages                   =$(call lp.clean.files, node_modules)
lp.clean.tsc-output                     =$(call lp.clean.files, $(if $(strip $(LP_SETTINGS_TSC_OUT_DIR)), $(LP_SETTINGS_TSC_OUT_DIR), $(__LP_TSC_BUILDINFO)))
lp.clean.bundles                        =$(call lp.fn.var.assign, __LP_CLEAN_DELETE_BUNDLES, true)
lp.clean.files                          =$(call lp.fn.var.append, __LP_CLEAN_FILES, $(1))

lp.clean.get-phony-targets              =clean
lp.clean.get-name                       =Clean
lp.clean.get-description                =delete temporary files
lp.clean.is-enabled                     =$(strip $(__LP_CLEAN_ENABLED))
lp.clean.get-default-prerequisites      =<n/a>
lp.clean.get-prerequisites              =
lp.clean.get-default-targets            =<n/a>
lp.clean.get-targets                    =
lp.clean.get-default-before-hooks       =<n/a>
lp.clean.get-before-hooks               =
lp.clean.get-default-after-hooks        =<n/a>
lp.clean.get-after-hooks                =
lp.clean.get-default-command            =$(if $(1), echo $(1) && )$(strip $(__LP_CLEAN_DEFAULT_COMMAND))
lp.clean.get-effective-command          =$(strip $(__LP_CLEAN_EFFECTIVE_COMMAND))
lp.clean.get-command-with-hooks         =$(call lp.fn.get-command, clean, $(1))
lp.clean.get-files                      =$(strip $(sort \
                                             $(__LP_CLEAN_FILES) \
                                             $(if $(__LP_CLEAN_DELETE_BUNDLES), \
                                                  $(call lp.bundle.get-targets) \
                                                  $(patsubst %.js, %.d.ts, $(call lp.bundle.get-targets)) \
                                                  $(patsubst %.js, %.js.map, $(call lp.bundle.get-targets)) \
                                              ) \
                                          ))
