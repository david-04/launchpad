#-----------------------------------------------------------------------------------------------------------------------
# Help
#-----------------------------------------------------------------------------------------------------------------------

$(call lp.help.disable                                          ) # disable the "help" target ("lp.help" remains active)

$(call lp.help.add-target       , generated.ts, ....... refresh ) # register a target with description
$(call lp.help.add-phony-target , run, ................ execute ) # register a target and make it .PHONY

$(call lp.help.add-extra-dots   ,                      ...      ) # add more spacing/dots when printing built-in targets

#-----------------------------------------------------------------------------------------------------------------------
# Compile
#-----------------------------------------------------------------------------------------------------------------------

$(call lp.tsc.disable                                ) # disable the "tsc" target ("lp.tsc" remains active)

$(call lp.tsc.add-extra-prerequisites    , ...files  ) # add extra prerequisite files that should cause a re-build
$(call lp.tsc.overwrite-prerequisites    , ...files  ) # use only the given files as prerequisistes
$(call lp.tsc.add-extra-targets          , ...files  ) # declare extra target files generated by the before/after hooks
$(call lp.tsc.overwrite-targets          , ...files  ) # use only the given files as targets

$(call lp.tsc.add-before-hook            , pwd && ls ) # append commands to run before compiling
$(call lp.tsc.overwrite-before-hooks     , pwd && ls ) # overwrite any previsouly defined before-hook commands
$(call lp.tsc.add-after-hook             , pwd && ls ) # append commands to run after compiling
$(call lp.tsc.overwrite-after-hooks      , pwd && ls ) # overwrite any previsouly defined after-hook commands
$(call lp.tsc.overwrite-command          , tsc -b    ) # overwrite the command itself

$(call lp.tsc.get-command-with-hooks     , compile...) # get the command with all hooks (with an optional "echo")
$(call lp.tsc.get-default-command        , compile...) # get the built-in command (with an optional "echo")

$(LP_TSC_TARGETS)                                      # use as a prerequisite for targets that depend on "tsc"

#-----------------------------------------------------------------------------------------------------------------------
# Bundle
#-----------------------------------------------------------------------------------------------------------------------

$(call lp.bundle.add-bundle, src/lib.ts, dist/lib.js ) # add a bundle

$(call lp.bundle.enable-source-maps                  ) # enable source-map generation
$(call lp.bundle.disable-source-maps                 ) # disable source-map generation
$(call lp.bundle.enable-inline-sources               ) # include sources in source maps (enables source maps as well)
$(call lp.bundle.disable-inline-sources              ) # do not include sources in source maps
$(call lp.bundle.enabled-dts                         ) # generate d.ts typings for each bundle
$(call lp.bundle.disable-dts                         ) # do not generate d.ts typings

$(call lp.bundle.disable                             ) # disable the "bundle" target ("lp.bundle" remains active)

$(call lp.bundle.add-extra-prerequisites , ...files  ) # add extra prerequisite files that should cause a re-build
$(call lp.bundle.overwrite-prerequisites , ...files  ) # use only the given files as prerequisistes
$(call lp.bundle.add-extra-targets       , ...files  ) # declare extra target files generated by the before/after hooks
$(call lp.bundle.overwrite-targets       , ...files  ) # use only the given files as targets

$(call lp.bundle.add-before-hook         , pwd && ls ) # append commands to run before compiling
$(call lp.bundle.overwrite-before-hooks  , pwd && ls ) # overwrite any previsouly defined before-hook commands
$(call lp.bundle.add-after-hook          , pwd && ls ) # append commands to run after compiling
$(call lp.bundle.overwrite-after-hooks   , pwd && ls ) # overwrite any previsouly defined after-hook commands
$(call lp.bundle.overwrite-command       , tsc -b    ) # overwrite the command itself

$(call lp.bundle.get-command-with-hooks  , compile...) # get the command with all hooks (with an optional "echo")
$(call lp.bundle.get-default-command     , compile...) # get the built-in command (with an optional "echo")

$(LP_BUNDLE_TARGETS)                                   # use as a prerequisite for targets that depend on "bundle"
