#-----------------------------------------------------------------------------------------------------------------------
# Help
#-----------------------------------------------------------------------------------------------------------------------

$(call lp.help.disable                                          ) # disable the "help" target ("lp.help" remains active)

$(call lp.help.add-target       , generated.ts, ....... refresh ) # register a target with description
$(call lp.help.add-phony-target , run, ................ execute ) # register a target and make it .PHONY

$(call lp.help.add-extra-dots   ,                      ...      ) # add more spacing/dots when printing built-in targets

#-----------------------------------------------------------------------------------------------------------------------
# Compile
#-----------------------------------------------------------------------------------------------------------------------

$(call lp.tsc.disable                                ) # disable the "tsc" target ("lp.tsc" remains active)

$(call lp.tsc.add-extra-prerequisites    , ...files  ) # add extra prerequisite files that should cause a re-build
$(call lp.tsc.overwrite-prerequisites    , ...files  ) # use only the given files as prerequisites
$(call lp.tsc.add-extra-targets          , ...files  ) # declare extra target files generated by the before/after hooks
$(call lp.tsc.overwrite-targets          , ...files  ) # use only the given files as targets

$(call lp.tsc.add-before-hook            , pwd && ls ) # append commands to run before compiling
$(call lp.tsc.overwrite-before-hooks     , pwd && ls ) # overwrite any previously defined before-hook commands
$(call lp.tsc.add-after-hook             , pwd && ls ) # append commands to run after compiling
$(call lp.tsc.overwrite-after-hooks      , pwd && ls ) # overwrite any previously defined after-hook commands
$(call lp.tsc.overwrite-command          , tsc -b    ) # overwrite the command itself

$(call lp.tsc.get-command-with-hooks     , Compile...) # get the command with all hooks (with an optional "echo")
$(call lp.tsc.get-default-command        , Compile...) # get the built-in command (with an optional "echo")

$(LP_TSC_TARGETS)                                      # use as a prerequisite for targets that depend on "tsc"

#-----------------------------------------------------------------------------------------------------------------------
# Bundle
#-----------------------------------------------------------------------------------------------------------------------

$(call lp.bundle.add-bundle, src/lib.ts, dist/lib.js ) # add a bundle

$(call lp.bundle.enable-source-maps                  ) # enable source-map generation
$(call lp.bundle.disable-source-maps                 ) # disable source-map generation
$(call lp.bundle.enable-inline-sources               ) # include sources in source maps (enables source maps as well)
$(call lp.bundle.disable-inline-sources              ) # do not include sources in source maps
$(call lp.bundle.enabled-dts                         ) # generate d.ts typings for each bundle
$(call lp.bundle.disable-dts                         ) # do not generate d.ts typings

$(call lp.bundle.disable                             ) # disable the "bundle" target ("lp.bundle" remains active)

$(call lp.bundle.add-extra-prerequisites , ...files  ) # add extra prerequisite files that should cause a re-build
$(call lp.bundle.overwrite-prerequisites , ...files  ) # use only the given files as prerequisites
$(call lp.bundle.add-extra-targets       , ...files  ) # declare extra target files generated by the before/after hooks
$(call lp.bundle.overwrite-targets       , ...files  ) # use only the given files as targets

$(call lp.bundle.add-before-hook         , pwd && ls ) # append commands to run before compiling
$(call lp.bundle.overwrite-before-hooks  , pwd && ls ) # overwrite any previously defined before-hook commands
$(call lp.bundle.add-after-hook          , pwd && ls ) # append commands to run after compiling
$(call lp.bundle.overwrite-after-hooks   , pwd && ls ) # overwrite any previously defined after-hook commands
$(call lp.bundle.overwrite-command       , tsc -b    ) # overwrite the command itself

$(call lp.bundle.get-command-with-hooks  , Bundle... ) # get the command with all hooks (with an optional "echo")
$(call lp.bundle.get-default-command     , Bundle... ) # get the built-in command (with an optional "echo")

$(LP_BUNDLE_TARGETS)                                   # use as a prerequisite for targets that depend on "bundle"

#-----------------------------------------------------------------------------------------------------------------------
# Format
#-----------------------------------------------------------------------------------------------------------------------

$(call lp.format.include, file1.json file2.ts        ) # add the given files
$(call lp.format.include, src scripts resources      ) # add all files (of supported formats) in the given directories
$(call lp.format.include, resources, *.json *.js     ) # add specific files in the given directories
$(call lp.format.include, file.json src, *.ts *.tsx  ) # specific files and directory wildcards can be combined
$(call lp.format.exclude, file.json src, *.ts *.tsx  ) # exclude the given files and directories from formatting
$(call lp.format.include-only, file.json src, *.ts   ) # discard any default and previously added files

$(call lp.format.disable                             ) # disable the "format" target ("lp.format" remains active)

$(call lp.format.add-before-hook         , pwd && ls ) # append commands to run before formatting
$(call lp.format.overwrite-before-hooks  , pwd && ls ) # overwrite any previously defined before-hook commands
$(call lp.format.add-after-hook          , pwd && ls ) # append commands to run after formatting
$(call lp.format.overwrite-after-hooks   , pwd && ls ) # overwrite any previously defined after-hook commands
$(call lp.format.overwrite-command       , prettier  ) # overwrite the command itself

$(call lp.bundle.get-command-with-hooks  , Format... ) # get the command with all hooks (with an optional "echo")
$(call lp.bundle.get-default-command     , Format... ) # get the built-in command (with an optional "echo")

#-----------------------------------------------------------------------------------------------------------------------
# Run
#-----------------------------------------------------------------------------------------------------------------------

$(call lp.run, build/main.js ) param1 param2           # run a compiled (or bundled) command-line script
$(call lp.run, src/main.ts   ) param1 param2           # run a source file (e.g. via ts-node or bun)

#-----------------------------------------------------------------------------------------------------------------------
# Clean
#-----------------------------------------------------------------------------------------------------------------------

$(call lp.clean.npm-packages                         ) # delete node_modules
$(call lp.clean.tsc-output                           ) # delete transpiled JavaScript files
$(call lp.clean.bundles                              ) # delete bundles
$(call lp.clean.files, output.log dist               ) # delete the given files and directories
