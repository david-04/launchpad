#-----------------------------------------------------------------------------------------------------------------------
#
#    ##     ## ######## ##       ########
#    ##     ## ##       ##       ##     ##
#    ##     ## ##       ##       ##     ##
#    ######### ######   ##       ########
#    ##     ## ##       ##       ##
#    ##     ## ##       ##       ##
#    ##     ## ######## ######## ##
#
#-----------------------------------------------------------------------------------------------------------------------

$(call lp.help.disable                                          ) # disable the "help" target ("lp.help" remains active)

$(call lp.help.add-target       , generated.ts, ....... refresh ) # register a target with description
$(call lp.help.add-phony-target , run, ................ execute ) # register a target and make it .PHONY

$(call lp.help.add-extra-dots   ,                      ...      ) # add more spacing/dots when printing built-in targets

#-----------------------------------------------------------------------------------------------------------------------
#
#   ########  ####    ###     ######   ##    ##  #######   ######  ######## ####  ######   ######
#   ##     ##  ##    ## ##   ##    ##  ###   ## ##     ## ##    ##    ##     ##  ##    ## ##    ##
#   ##     ##  ##   ##   ##  ##        ####  ## ##     ## ##          ##     ##  ##       ##
#   ##     ##  ##  ##     ## ##   #### ## ## ## ##     ##  ######     ##     ##  ##        ######
#   ##     ##  ##  ######### ##    ##  ##  #### ##     ##       ##    ##     ##  ##             ##
#   ##     ##  ##  ##     ## ##    ##  ##   ### ##     ## ##    ##    ##     ##  ##    ## ##    ##
#   ########  #### ##     ##  ######   ##    ##  #######   ######     ##    ####  ######   ######
#
#-----------------------------------------------------------------------------------------------------------------------

$(call lp.diagnostics.disable                                   ) # disable diagnostics targets ("lp.*" remains active)
$(call lp.diagnostics.set-target-names, help info config        ) # set aliases for diagnostics targets

#-----------------------------------------------------------------------------------------------------------------------
#
#    ######   #######  ##     ## ########  #### ##       ########
#   ##    ## ##     ## ###   ### ##     ##  ##  ##       ##
#   ##       ##     ## #### #### ##     ##  ##  ##       ##
#   ##       ##     ## ## ### ## ########   ##  ##       ######
#   ##       ##     ## ##     ## ##         ##  ##       ##
#   ##    ## ##     ## ##     ## ##         ##  ##       ##
#    ######   #######  ##     ## ##        #### ######## ########
#
#-----------------------------------------------------------------------------------------------------------------------

$(call lp.tsc.disable                                ) # disable the "tsc" target ("lp.tsc" remains active)

$(call lp.tsc.add-extra-prerequisites    , ...files  ) # add extra prerequisite files that should cause a re-build
$(call lp.tsc.overwrite-prerequisites    , ...files  ) # use only the given files as prerequisites
$(call lp.tsc.add-extra-targets          , ...files  ) # declare extra target files generated by the before/after hooks
$(call lp.tsc.overwrite-targets          , ...files  ) # use only the given files as targets

$(call lp.tsc.add-before-hook            , pwd && ls ) # append commands to run before compiling
$(call lp.tsc.overwrite-before-hooks     , pwd && ls ) # overwrite any previously defined before-hook commands
$(call lp.tsc.add-after-hook             , pwd && ls ) # append commands to run after compiling
$(call lp.tsc.overwrite-after-hooks      , pwd && ls ) # overwrite any previously defined after-hook commands
$(call lp.tsc.overwrite-command          , tsc -b    ) # overwrite the command itself

$(call lp.tsc.get-command-with-hooks     , Compile...) # get the command with all hooks (with an optional "echo")
$(call lp.tsc.get-default-command        , Compile...) # get the built-in command (with an optional "echo")

$(LP_PREREQUISITE_TSC)                                 # use as a prerequisite for targets that depend on "tsc"

#-----------------------------------------------------------------------------------------------------------------------
#
#    ########  ##     ## ##    ## ########  ##       ########
#    ##     ## ##     ## ###   ## ##     ## ##       ##
#    ##     ## ##     ## ####  ## ##     ## ##       ##
#    ########  ##     ## ## ## ## ##     ## ##       ######
#    ##     ## ##     ## ##  #### ##     ## ##       ##
#    ##     ## ##     ## ##   ### ##     ## ##       ##
#    ########   #######  ##    ## ########  ######## ########
#
#-----------------------------------------------------------------------------------------------------------------------

$(call lp.bundle.add,                                  # add a file to be bundled
       src/app.ts,                                     # [1] source file
       dist/app.js,                                    # [2] bundled output file
                                                       # [3] list of strings to override the project's configuration
           minify                                      #     - minify the JavaScript bundle
           cli | web                                   #     - bundle for cli/node or web
           sourcemap                                   #     - generate a source map
           inline-sources                              #     - generate a source map and inline sources
           cjs | esm                                   #     - set the target module system
           dts,                                        #     - generate a bundled d.ts declaration file
       echo "js after-hook",                           # [3] command to run after bundling the js file
	   echo "dts after-hook"                           # [4] command to run after bundling the d.ts file
 )

$(call lp.bundle.disable                             ) # disable the "bundle" target ("lp.bundle" remains active)

$(call lp.bundle.add-extra-prerequisites , ...files  ) # add extra prerequisite files that should cause a re-bundle
$(call lp.bundle.overwrite-prerequisites , ...files  ) # use only the given files as prerequisites for bundling
$(call lp.bundle.add-extra-js-targets    , ...files  ) # declare extra js targets (created separately or by hooks)
$(call lp.bundle.add-extra-dts-targets   , ...files  ) # declare extra d.ts targets (created separately or by hooks)
$(call lp.bundle.overwrite-js-targets    , ...files  ) # use only the given files as js targets
$(call lp.bundle.overwrite-dts-targets   , ...files  ) # use only the given files as d.ts targets

$(LP_PREREQUISITE_BUNDLE)                              # use as a prerequisite for targets that depend on "bundle"
$(LP_PREREQUISITE_BUNDLE_JS)                           # same as above but only require bundled JavaScript files
$(LP_PREREQUISITE_BUNDLE_DTS)                          # same as above but only require bundled d.ts. declaration files

#-----------------------------------------------------------------------------------------------------------------------
#
#    ########  #######  ########  ##     ##    ###    ########
#    ##       ##     ## ##     ## ###   ###   ## ##      ##
#    ##       ##     ## ##     ## #### ####  ##   ##     ##
#    ######   ##     ## ########  ## ### ## ##     ##    ##
#    ##       ##     ## ##   ##   ##     ## #########    ##
#    ##       ##     ## ##    ##  ##     ## ##     ##    ##
#    ##        #######  ##     ## ##     ## ##     ##    ##
#
#-----------------------------------------------------------------------------------------------------------------------

$(call lp.format.include, file1.json file2.ts        ) # add the given files
$(call lp.format.include, src scripts resources      ) # add all files (of supported formats) in the given directories
$(call lp.format.include, resources, *.json *.js     ) # add specific files in the given directories
$(call lp.format.include, file.json src, *.ts *.tsx  ) # specific files and directory wildcards can be combined
$(call lp.format.exclude, file.json src, *.ts *.tsx  ) # exclude the given files and directories from formatting
$(call lp.format.include-only, file.json src, *.ts   ) # discard any default and previously added files

$(call lp.format.disable                             ) # disable the "format" target ("lp.format" remains active)

$(call lp.format.add-before-hook         , pwd && ls ) # append commands to run before formatting
$(call lp.format.overwrite-before-hooks  , pwd && ls ) # overwrite any previously defined before-hook commands
$(call lp.format.add-after-hook          , pwd && ls ) # append commands to run after formatting
$(call lp.format.overwrite-after-hooks   , pwd && ls ) # overwrite any previously defined after-hook commands
$(call lp.format.overwrite-command       , prettier  ) # overwrite the command itself

$(call lp.bundle.get-command-with-hooks  , Format... ) # get the command with all hooks (with an optional "echo")
$(call lp.bundle.get-default-command     , Format... ) # get the built-in command (with an optional "echo")

#-----------------------------------------------------------------------------------------------------------------------
#
#   ##     ## ########  ##       #### ######## ########
#   ##     ## ##     ## ##        ##  ##          ##
#   ##     ## ##     ## ##        ##  ##          ##
#   ##     ## ########  ##        ##  ######      ##
#   ##     ## ##        ##        ##  ##          ##
#   ##     ## ##        ##        ##  ##          ##
#    #######  ##        ######## #### ##          ##
#
#-----------------------------------------------------------------------------------------------------------------------

$(call lp.uplift.disable                             ) # disable the uplift target ("lp.uplift" remains active)

$(call lp.uplift.add-before-hook         , pwd && ls ) # append commands to run before uplifting
$(call lp.uplift.overwrite-before-hooks  , pwd && ls ) # overwrite any previously defined before-hook commands
$(call lp.uplift.add-after-hook          , pwd && ls ) # append commands to run after uplifting
$(call lp.uplift.overwrite-after-hooks   , pwd && ls ) # overwrite any previously defined after-hook commands
$(call lp.uplift.overwrite-command       , prettier  ) # overwrite the command itself

#-----------------------------------------------------------------------------------------------------------------------
#
#     ######  ##       ########    ###    ##    ##
#    ##    ## ##       ##         ## ##   ###   ##
#    ##       ##       ##        ##   ##  ####  ##
#    ##       ##       ######   ##     ## ## ## ##
#    ##       ##       ##       ######### ##  ####
#    ##    ## ##       ##       ##     ## ##   ###
#     ######  ######## ######## ##     ## ##    ##
#
#-----------------------------------------------------------------------------------------------------------------------

$(call lp.clean.npm-packages                         ) # delete node_modules
$(call lp.clean.tsc-output                           ) # delete transpiled JavaScript files
$(call lp.clean.bundles                              ) # delete bundles
$(call lp.clean.files, output.log dist               ) # delete the given files and directories

#-----------------------------------------------------------------------------------------------------------------------
#
#    ########  ##     ## ##    ##
#    ##     ## ##     ## ###   ##
#    ##     ## ##     ## ####  ##
#    ########  ##     ## ## ## ##
#    ##   ##   ##     ## ##  ####
#    ##    ##  ##     ## ##   ###
#    ##     ##  #######  ##    ##
#
#-----------------------------------------------------------------------------------------------------------------------

$(call lp.run, build/main.js ) ...arguments            # run a compiled (or bundled) command-line script
$(call lp.run, src/main.ts   ) ...arguments            # run a source file (e.g. via ts-node or bun)
