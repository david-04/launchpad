import type { SerializationDetails } from "./config-data-types";
import type { NewConfig } from "./config-objects";
import { ConfigProperties } from "./config-properties";

//----------------------------------------------------------------------------------------------------------------------
// Serialize properties
//----------------------------------------------------------------------------------------------------------------------

export function serializeConfig(config: NewConfig) {
    const header = [
        "#-----------------------------------------------------------------------------------------------------------------------",
        '# Do not edit this file manually. Run "launchpad init" to reconfigure/reset the project.',
        "#-----------------------------------------------------------------------------------------------------------------------",
    ];
    const properties = ConfigProperties.arrays.current.map(property => property.serialize(config));
    const maxKeyLength = properties.reduce((max, property) => Math.max(max, property?.key.length ?? 0), 0);
    const maxValueLength = properties.reduce((max, property) => Math.max(max, property?.value.length ?? 0), 0);
    const lines = properties.map(property => (property ? formatProperty(property, maxKeyLength, maxValueLength) : ""));
    return [...header, "", ...lines.filter(line => line)].map(line => line.trim()).join("\n");
}

//----------------------------------------------------------------------------------------------------------------------
// Serialize a single property
//----------------------------------------------------------------------------------------------------------------------

function formatProperty(property: SerializationDetails, maxKeyLength: number, maxValueLength: number) {
    const key = property.key.padEnd(maxKeyLength);
    const value = property.value.padEnd(maxValueLength);
    const comment = property.comment ? ` # ${property.comment}` : "";
    return `${key} = ${value} ${comment}`;
}
