{
    "compilerOptions": {

        //------------------------------------------------------------------------------------------------------------------
        // Projects
        //------------------------------------------------------------------------------------------------------------------

        "incremental": true, //                                 Save .tsbuildinfo file (defaults to the same directory as the *.js output)
        "composite": false, //                                  rootDir defaults to tsconfig directory, all sources must be matched by include patterns, declaration defaults to true
        "disableSourceOfProjectReferenceRedirect": false, //    Disable preferring source files instead of declaration files when referencing composite projects.
        "disableSolutionSearching": false, //                   Opt a project out of multi-project reference checking when editing.
        "disableReferencedProjectLoad": false, //               Reduce the number of projects loaded automatically by TypeScript.
        "tsBuildInfoFile": "__OUT_DIR__/.tsbuildinfo", //       Specify the path to .tsbuildinfo incremental compilation file.

        //------------------------------------------------------------------------------------------------------------------
        // Language and environment
        //------------------------------------------------------------------------------------------------------------------

        "experimentalDecorators": false, //                     Enable experimental support for legacy experimental decorators.
        "emitDecoratorMetadata": false, //                      Emit design-type metadata for decorated declarations in source files.
        // "lib": [], //                                        Specify a set of bundled library declaration files that describe the target runtime environment. - inherits from "target" and auto-includes DOM
        "libReplacement": false, //                             Disable lib replacement
        "noLib": false, //                                      Disable including any library files, including the default lib.d.ts.
        "useDefineForClassFields": true, //                     Emit ECMAScript-standard-compliant class fields.
        "moduleDetection": "force", //                          Control what method is used to detect module-format JS files. - "force" means "treat each ts file as module"

        //------------------------------------------------------------------------------------------------------------------
        // Modules
        //------------------------------------------------------------------------------------------------------------------

        // "rootDir": "", //                                    Specify the root folder within your source files.
        // "paths": {}, //                                      Specify a set of entries that re-map imports to additional lookup locations.
        // "rootDirs": [], //                                   Allow multiple folders to be treated as one when resolving modules.
        // "typeRoots": [], //                                  Specify multiple folders that act like './node_modules/@types'.
        // "types": [], //                                      Specify type package names to be included without being referenced in a source file.
        "allowUmdGlobalAccess": false, //                       Allow accessing UMD globals from modules.
        // "moduleSuffixes": [], //                             List of file name suffixes to search when resolving a module.
        "allowImportingTsExtensions": false, //                 Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set.
        // "resolvePackageJsonExports": true, //                Use the package.json 'exports' field when resolving package imports.
        // "resolvePackageJsonImports": true, //                Use the package.json 'imports' field when resolving imports.
        // "customConditions": [], //                           Conditions to set in addition to the resolver-specific defaults when resolving imports.
        "noUncheckedSideEffectImports": false, //               Check side effect imports.
        "resolveJsonModule": true, //                           Enable importing .json files.
        // "noResolve": true, //                                Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project.
        // "baseUrl": "__SRC_DIR__", //                         Specify the base directory to resolve non-relative module names.
        "rewriteRelativeImportExtensions": false, //            Rewrite '.ts', '.tsx', '.mts', and '.cts' file extensions in relative import paths to their JavaScript equivalent in output files.

        //------------------------------------------------------------------------------------------------------------------
        // JavasCript support
        //------------------------------------------------------------------------------------------------------------------

        "allowJs": false, //                                    Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files.
        // "checkJs": true, //                                  Enable error reporting in type-checked JavaScript files.
        // "maxNodeModuleJsDepth": 1, //                        Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'.

        //------------------------------------------------------------------------------------------------------------------
        // Emit
        //------------------------------------------------------------------------------------------------------------------

        "sourceMap": true, //                                   Create source map files for emitted JavaScript files.
        "inlineSourceMap": false, //                            Include sourcemap files inside the emitted JavaScript.
        // "outFile": "./", //                                  not applicable for modules | Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output.
        "outDir": "__OUT_DIR__", //                              Specify an output folder for all emitted files.
        "noEmit": false, //                                     Disable emitting files from a compilation.
        "importHelpers": false, //                              don't emit downlevel helpers in each module - requires "npm install tslib" | Allow importing helper functions from tslib once per project, instead of including them per-file.
        "downlevelIteration": false, //                         not required when targeting ES6 | Emit more compliant, but verbose and less performant JavaScript for iteration.
        // "sourceRoot": "", //                                 Specify the root path for debuggers to find the reference source code.
        // "mapRoot": "", //                                    Specify the location where debugger should locate map files instead of generated locations.
        "inlineSources": false, //                              Include source code in the sourcemaps inside the emitted JavaScript.
        "emitBOM": false, //                                    Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.
        "newLine": "lf", //                                     Set the newline character for emitting files. */
        "stripInternal": true, //                               Disable emitting declarations that have '@internal' in their JSDoc comments.
        "noEmitHelpers": false, //                              Disable generating custom helper functions like '__extends' in compiled output.
        "noEmitOnError": true, //                               Disable emitting files if any type checking errors are reported.
        "preserveConstEnums": true, //                          Disable erasing 'const enum' declarations in generated code.
        // "declarationDir": "./", //                           Specify the output directory for generated declaration files.

        //------------------------------------------------------------------------------------------------------------------
        // Interop Constraints
        //------------------------------------------------------------------------------------------------------------------

        "isolatedModules": true, //                             enables warnings for code style that might confuse the bundler | Ensure that each file can be safely transpiled without relying on other imports.
        "allowSyntheticDefaultImports": false, //               Allow 'import x from y' when a module doesn't have a default export.
        "verbatimModuleSyntax": false, //                       Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting.
        "isolatedDeclarations": false, //                       Require sufficient annotation on exports so other tools can trivially generate declaration files.
        "esModuleInterop": true, //                             Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility.
        "preserveSymlinks": false, //                           Disable resolving symlinks to their realpath. This correlates to the same flag in node.
        "forceConsistentCasingInFileNames": true, //            Ensure that casing is correct in imports.
        "erasableSyntaxOnly": false, //                         Do not allow runtime constructs that are not part of ECMAScript.

        //------------------------------------------------------------------------------------------------------------------
        // Type checking
        //------------------------------------------------------------------------------------------------------------------

        "strict": true, //                                      Enable all strict type-checking options.
        "noImplicitAny": true, //                               Enable error reporting for expressions and declarations with an implied 'any' type.
        "strictNullChecks": true, //                            When type checking, take into account 'null' and 'undefined'.
        "strictFunctionTypes": true, //                         When assigning functions, check to ensure parameters and the return values are subtype-compatible.
        "strictBindCallApply": true, //                         Check that the arguments for 'bind', 'call', and 'apply' methods match the original function.
        "strictPropertyInitialization": true, //                Check for class properties that are declared but not set in the constructor.
        "strictBuiltinIteratorReturn": true,  //                Built-in iterators are instantiated with a 'TReturn' type of 'undefined' instead of 'any'.
        "noImplicitThis": true, //                              Enable error reporting when 'this' is given the type 'any'.
        "useUnknownInCatchVariables": true, //                  Default catch clause variables as 'unknown' instead of 'any'.
        "alwaysStrict": true, //                                Ensure 'use strict' is always emitted.
        "noUnusedLocals": true, //                              Enable error reporting when local variables aren't read.
        "noUnusedParameters": true, //                          Raise an error when a function parameter isn't read.
        "exactOptionalPropertyTypes": true, //                  Interpret optional property types as written, rather than adding 'undefined'.
        "noImplicitReturns": true, //                           Enable error reporting for codepaths that do not explicitly return in a function.
        "noFallthroughCasesInSwitch": true, //                  Enable error reporting for fallthrough cases in switch statements.
        "noUncheckedIndexedAccess": true, //                    Add 'undefined' to a type when accessed using an index.
        "noImplicitOverride": true, //                          Ensure overriding members in derived classes are marked with an override modifier.
        "noPropertyAccessFromIndexSignature": true, //          Enforces using indexed accessors for keys declared using an indexed type.
        "allowUnusedLabels": false, //                          Disable error reporting for unused labels.
        "allowUnreachableCode": false, //                       Disable error reporting for unreachable code.

        //------------------------------------------------------------------------------------------------------------------
        // Type checking
        //------------------------------------------------------------------------------------------------------------------

        // "skipDefaultLibCheck": false, //                     Deprecated - use "skipLibCheck" instead | Skip type checking .d.ts files that are included with TypeScript.
        "skipLibCheck": true //                                 Only check the d.ts files that are actually used/imported | Skip type checking all .d.ts files.
    },
    "include": ["../../../src/**/*.ts", "../../../src/**/*.tsx"]
}
